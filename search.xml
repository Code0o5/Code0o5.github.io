<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Cocoapods多版本共存</title>
    <url>/2021/05/06/Cocoapods%E5%A4%9A%E7%89%88%E6%9C%AC%E5%85%B1%E5%AD%98/</url>
    <content><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p><code>Cocoapods</code>在<code>1.8</code>版本以后加入了<code>CDN</code>，加快了下载第三方库文件的速度。所以有的时候可能会同时需要<code>1.8</code>前和<code>1.8</code>后版本的<code>Cocoapods</code>。</p>
<hr>
<h2 id="2-查看Cocoapods版本"><a href="#2-查看Cocoapods版本" class="headerlink" title="2. 查看Cocoapods版本"></a>2. 查看<code>Cocoapods</code>版本</h2><h3 id="2-1-查看本地所有版本的Cocoapods"><a href="#2-1-查看本地所有版本的Cocoapods" class="headerlink" title="2.1 查看本地所有版本的Cocoapods"></a>2.1 查看本地所有版本的<code>Cocoapods</code></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gem list cocoapods</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*** LOCAL GEMS ***</span><br><span class="line"></span><br><span class="line">cocoapods (1.10.1)</span><br><span class="line">cocoapods-core (1.10.1)</span><br><span class="line">cocoapods-deintegrate (1.0.4)</span><br><span class="line">cocoapods-downloader (1.4.0)</span><br><span class="line">cocoapods-plugins (1.0.0)</span><br><span class="line">cocoapods-search (1.0.0)</span><br><span class="line">cocoapods-trunk (1.5.0)</span><br><span class="line">cocoapods-try (1.2.0)</span><br></pre></td></tr></table></figure>

<p>本地安装了最新的<code>1.10.1</code>版本。</p>
<h3 id="2-2-安装其他版本"><a href="#2-2-安装其他版本" class="headerlink" title="2.2 安装其他版本"></a>2.2 安装其他版本</h3><p>安装<code>1.6.2</code>版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gem install cocoapods -v 1.6.2</span><br></pre></td></tr></table></figure>

<p>再次查看本地安装的所有版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*** LOCAL GEMS ***</span><br><span class="line"></span><br><span class="line">cocoapods (1.10.1, 1.6.2)</span><br><span class="line">cocoapods-core (1.10.1, 1.6.2)</span><br><span class="line">cocoapods-deintegrate (1.0.4)</span><br><span class="line">cocoapods-downloader (1.4.0)</span><br><span class="line">cocoapods-plugins (1.0.0)</span><br><span class="line">cocoapods-search (1.0.0)</span><br><span class="line">cocoapods-stats (1.1.0)</span><br><span class="line">cocoapods-trunk (1.5.0)</span><br><span class="line">cocoapods-try (1.2.0)</span><br></pre></td></tr></table></figure>



<h3 id="2-3-查看当前使用的Cocoapods版本"><a href="#2-3-查看当前使用的Cocoapods版本" class="headerlink" title="2.3 查看当前使用的Cocoapods版本"></a>2.3 查看当前使用的<code>Cocoapods</code>版本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod --version</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.10.1</span><br></pre></td></tr></table></figure>

<p>这是因为默认使用最新的版本。</p>
<h3 id="2-4-使用指定版本的Cocoapods"><a href="#2-4-使用指定版本的Cocoapods" class="headerlink" title="2.4 使用指定版本的Cocoapods"></a>2.4 使用指定版本的<code>Cocoapods</code></h3><p>可以在执行<code>pod</code>命令时指定版本号，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod _1.6.2_ install</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>iOS</category>
        <category>CocoaPods</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CocoaPods安装教程</title>
    <url>/2021/04/26/CocoaPods%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="CocoaPods简介"><a href="#CocoaPods简介" class="headerlink" title="CocoaPods简介"></a><code>CocoaPods</code>简介</h3><p><code>CocoaPods</code>是用<code>Ruby</code>写的，用于<code>iOS</code>开发中第三方开源库的管理。安装<code>CocoaPods</code>要用到<code>gem</code>。</p>
<hr>
<h2 id="1-gem使用"><a href="#1-gem使用" class="headerlink" title="1. gem使用"></a>1. <code>gem</code>使用</h2><h3 id="1-1-gem简介"><a href="#1-1-gem简介" class="headerlink" title="1.1 gem简介"></a>1.1 <code>gem</code>简介</h3><blockquote>
<p><code>RubyGems</code>是<code>Ruby</code>的一个包管理器，提供了分发<code>Ruby</code>程序和库的标准格式“gem”，旨在方便地管理<code>gem</code>安装的工具，以及用于分发<code>gem</code>的服务器。 –维基百科</p>
<p><code>Gem</code>是封装起来的<code>Ruby</code>应用程序或代码库。</p>
<p>注：在终端使用的gem命令，是指通过RubyGems管理Gem包。</p>
</blockquote>
<h3 id="1-2-gem安装"><a href="#1-2-gem安装" class="headerlink" title="1.2 gem安装"></a>1.2 <code>gem</code>安装</h3><p><code>Mac</code>自带<code>gem</code>。</p>
<h3 id="1-3-ruby和gem常用命令"><a href="#1-3-ruby和gem常用命令" class="headerlink" title="1.3 ruby和gem常用命令"></a>1.3 <code>ruby</code>和<code>gem</code>常用命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ruby -v #查看ruby版本</span><br><span class="line">gem -v  #查看gem版本</span><br><span class="line">gem update --system #更新RubyGems软件自身</span><br><span class="line">gem update #更新gem安装的所有程序包</span><br><span class="line">gem up date xxx #更新某个程序包</span><br><span class="line"></span><br><span class="line">gem sources -l #列出安装源</span><br><span class="line">gem sources -a XXX #添加安装源</span><br><span class="line">gem sources -r XXX #删除安装源</span><br><span class="line">gem sources -u #更新安装源</span><br><span class="line"></span><br><span class="line">gem install xxx #安装xxx,从本地或远程服务器</span><br><span class="line">gem install xxx --remote #安装xxx,从远程服务器</span><br><span class="line">gem install xxx -v(或者--version) 1.6.2  #指定安装版本的</span><br><span class="line">gem uninstall xxx #卸载xxx包,删除所有版本</span><br><span class="line">gem uninstall xxx -v 1.6.2 #卸载1.6.2版本的xxx包</span><br><span class="line"></span><br><span class="line">gem list #列出本地gem安装的所有程序包</span><br><span class="line">gem list d #列出本地以d开头的程序包</span><br><span class="line">gem list | grep cocoapods   #查看已安装cocoapods版本</span><br><span class="line"></span><br><span class="line">gem search log --both #从本地和远程服务器上查找含有log字符串的包</span><br><span class="line">gem search log --remoter #只从远程服务器上查找含有log字符串的包</span><br><span class="line">gem search -r log #只从远程服务器上查找含有log字符串的包</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="2-安装ruby"><a href="#2-安装ruby" class="headerlink" title="2. 安装ruby"></a>2. 安装<code>ruby</code></h2><ul>
<li><p>查看<code>ruby</code>版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ruby -v</span><br></pre></td></tr></table></figure>

<p>如果提示不识别的命令，标识没有安装<code>ruby</code>，需要执行以下步骤安装。</p>
</li>
<li><p>安装<code>rvm</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L get.rvm.io | bash -s stable </span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看<code>rvm</code>版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rvm -v</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看可安装的<code>ruby</code>版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rvm list known</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装指定版本的<code>ruby</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rvm install 2.7.0</span><br></pre></td></tr></table></figure>

<p>如果没有安装<code>Xcode</code>和<code>Command Line Tools for Xcode</code>以及<code>Homebrew</code>会自动下载安装，建议提前安装好。</p>
</li>
<li><p>设置默认<code>ruby</code>版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rvm use 2.7.0 --default</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看当前<code>ruby</code>源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gem sources -l</span><br></pre></td></tr></table></figure>
</li>
<li><p>更换<code>ruby</code>源，<code>ruby</code>默认的源地址<code>https://rubygems.org/</code>在国外，安装<code>cocoapods</code>可能会报错，最好切换到国内镜像源<code>https://gems.ruby-china.com/</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gem sources --remove https://rubygems.org/  #移除默认源</span><br><span class="line">gem sources --add https://gems.ruby-china.com/ #添加新的源</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="3-安装CocoaPods"><a href="#3-安装CocoaPods" class="headerlink" title="3. 安装CocoaPods"></a>3. 安装<code>CocoaPods</code></h2><ul>
<li><p>如果安装多个<code>Xcode</code>，需要选择版本，一般需要选择最近的Xcode版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装<code>CocoaPods</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gem install cocoapods  #安装最新版cocoapods</span><br><span class="line">sudo gem install cocoapods -v 1.8.4  #安装指定版本的cocoapods</span><br><span class="line">sudo gem install -n /usr/local/bin  cocoapods -v 1.8.4  #安装指定版本的cocoapods</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod setup</span><br></pre></td></tr></table></figure>

<p><code>cocoapods</code>在1.8版本以后加入了<code>CDN</code>,不需要下载<code>master</code>分支到<code>~/.cocoapods/repos</code>，执行该命令会直接提示Setup completed。如果是1.8之前的版本，则需要等待下载。参考<a href="https://blog.cocoapods.org/CocoaPods-1.8.0-beta/">https://blog.cocoapods.org/CocoaPods-1.8.0-beta/</a></p>
</li>
</ul>
<hr>
<h2 id="4-cocoapods使用"><a href="#4-cocoapods使用" class="headerlink" title="4. cocoapods使用"></a>4. <code>cocoapods</code>使用</h2><ul>
<li><p>在项目根目录下执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod init</span><br></pre></td></tr></table></figure>

<p>执行完成会自动在目录下生成<code>Podfile</code>文件</p>
</li>
<li><p>编辑<code>Podfile</code>文件，添加第三方库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;AFNetworking&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装第三方</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure>
</li>
<li><p>升级<code>pod</code>库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod update [pod库名称] </span><br></pre></td></tr></table></figure>

<p>不指定<code>pod</code>库名称，默认更新<code>podfile</code>里全部库。</p>
<p><code>pod install命令按照podfile.lock文件中的版本安装库，不检查更新库；pod update拉取最新的库版本，并更新符合podfile文件中指定的版本条件的库。建议多使用pod install,pod update命令使用之前先使用pod outdated命令查看有哪些库有新版本，再针对指定pod库更新版本。 </code></p>
</li>
</ul>
<hr>
<h2 id="5-Podfile文件解析"><a href="#5-Podfile文件解析" class="headerlink" title="5. Podfile文件解析"></a>5. <code>Podfile</code>文件解析</h2><p><code>Podfile</code>是项目指定<code>target</code>的依赖规范。配置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 支持的iOS系统的最低版本</span><br><span class="line">platform:ios,&#x27;8.0&#x27;</span><br><span class="line"></span><br><span class="line"># 指定开源库的下载源（组件化开发时会用到）</span><br><span class="line">#source &#x27;https://github.com/CocoaPods/Specs.git&#x27;</span><br><span class="line">#source &#x27;https://code.houbank.net/xxx/xxxSpecs.git&#x27;</span><br><span class="line"></span><br><span class="line"># ignore all warnings from all pods</span><br><span class="line">inhibit_all_warnings!</span><br><span class="line"></span><br><span class="line"># 使用framework（包含swift库就必须使用此设置，纯OC库可以不设置）</span><br><span class="line">use_frameworks!</span><br><span class="line"></span><br><span class="line"># 项目中如果有多个工程文件所以必须显式告知Cocopods，Pod的库属于哪个工程的依赖程的依赖</span><br><span class="line">#project &#x27;ProjectName.xcodeproj&#x27;</span><br><span class="line"></span><br><span class="line">target &#x27;ProjectName&#x27; do</span><br><span class="line">    pod &#x27;AFNetworking&#x27;,               # 网络基础库    </span><br><span class="line">end</span><br></pre></td></tr></table></figure>



<h3 id="5-1-项目配置"><a href="#5-1-项目配置" class="headerlink" title="5.1 项目配置"></a>5.1 项目配置</h3><ul>
<li><p>指定支持的系统及版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">platform:ios,&#x27;8.0&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p>指定下载源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source &#x27;https://github.com/CocoaPods/Specs.git&#x27;</span><br></pre></td></tr></table></figure>

<p>不指定默认从<code>cocoapods</code>官方公共库<code>https://github.com/CocoaPods/Specs.git</code>下载。设置镜像源，下载私有库，组件化开发等会用到该项配置。</p>
</li>
<li><p>忽略第三方框架的警告</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inhibit_all_warnings!</span><br></pre></td></tr></table></figure>
</li>
<li><p>是否使用动态库（iOS8.0以上支持）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use_frameworks!</span><br></pre></td></tr></table></figure>

<ul>
<li>不使用，会生成第三方框架对应的<code>.a</code>文件（静态链接库），位置：<code>Build Phases --&gt; Link Binary With Libraries --&gt; libPods-**.a</code></li>
<li>使用，会生成第三方框架对应的<code>frameworks</code>文件（包含了头文件、二进制文件、资源文件等），位置：<code>Build Phases --&gt; Link Binary With Libraries --&gt; Pods_xxx.framework</code></li>
<li>纯OC项目导入纯OC框架，一般不使用</li>
<li>swift项目导入swift框架，必须使用</li>
<li>swift项目导入OC框架，如果使用frameworks，在桥接文件中导入格式为：<code>\#import &quot;AFNetworking/AFNetworking.h&quot;</code>；如果不使用frameworks，在桥接文件中导入格式为：<code>#import &quot;AFNetworking.h&quot;</code></li>
</ul>
</li>
<li><p>指定是哪个工程的依赖，项目中有多个工程必须指定，单个工程一般忽略</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">project &#x27;ProjectName.xcodeproj&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-2-第三方框架版本控制"><a href="#5-2-第三方框架版本控制" class="headerlink" title="5.2 第三方框架版本控制"></a>5.2 第三方框架版本控制</h3><ul>
<li><p>版本号说明</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">版本号格式：x.y.z</span><br><span class="line">x表示重大更新的迭代版本号</span><br><span class="line">y表示项目添加了一些新功能</span><br><span class="line">z表示修复版本号，一般是修复项目的bug</span><br></pre></td></tr></table></figure>
</li>
<li><p>只指定三方库名称，默认使用最新版本的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;AFNetworking&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用指定版本号的库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;AFNetworking&#x27;, &#x27;3.1.0&#x27;   #使用3.1.0版本</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>逻辑运算符</code>指定版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">‘&gt; 0.1’ 高于0.1的任何版本</span><br><span class="line">‘&gt;= 0.1’ 版本0.1或更高版本</span><br><span class="line">‘&lt; 0.1’ 小于0.1的任何版本</span><br><span class="line">‘&lt;= 0.1’ 版本0.1和任何较低版本</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>乐观运算符</code>指定版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">‘~&gt; 0.1.2’ 版本0.1.2到版本0.2，不含0.2及以上</span><br><span class="line">‘~&gt; 0.1’ 版本0.1到版本1.0，不包括1.0及以上版本</span><br><span class="line">‘~&gt; 0’版本0及以上，这基本上和不指定版本号是相同的</span><br></pre></td></tr></table></figure>
</li>
<li><p>指定远程第三方框架位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;Alamofire&#x27;, :git =&gt; &#x27;https://github.com/Alamofire/Alamofire.git&#x27;  #使用主分支</span><br><span class="line">pod &#x27;Alamofire&#x27;, :git =&gt; &#x27;https://github.com/Alamofire/Alamofire.git&#x27;, :branch =&gt; &#x27;dev&#x27;  #使用不同分支</span><br><span class="line">pod &#x27;Alamofire&#x27;, :git =&gt; &#x27;https://github.com/Alamofire/Alamofire.git&#x27;, :tag =&gt; &#x27;3.1.1&#x27; #使用仓库的某一个tag</span><br><span class="line">pod &#x27;Alamofire&#x27;, :git =&gt; &#x27;https://github.com/Alamofire/Alamofire.git&#x27;, :commit =&gt; &#x27;0f506b1c45&#x27; #使用一个指定的提交commit</span><br></pre></td></tr></table></figure>

<p>从指定的远程地址下载第三方框架源码。</p>
</li>
<li><p>指定本地第三方路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;Alamofire&#x27;, :path =&gt; &#x27;~/Documents/Alamofire&#x27;</span><br></pre></td></tr></table></figure>

<p>指定的文件夹将成为<code>Pod</code>的根文件夹，并从该文件夹链接源码文件到项目中，制作<code>Pod</code>库时的示例项目就是很好的例子。需要注意的是指定的目录中必须包含<code>podspec</code>文件。</p>
</li>
</ul>
<h3 id="5-3-cocoapods更换源"><a href="#5-3-cocoapods更换源" class="headerlink" title="5.3 cocoapods更换源"></a>5.3 <code>cocoapods</code>更换源</h3><p><code>cocoapods</code>默认使用<code>github</code>源 ，在国内下载第三方库很慢，通过修改源来解决该问题。</p>
<ul>
<li><p>查看当前源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod repo list</span><br></pre></td></tr></table></figure>
</li>
<li><p>移除官方源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod repo remove master</span><br></pre></td></tr></table></figure>
</li>
<li><p>低版本添加新的源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod repo add master https://mirrors.tuna.tsinghua.edu.cn/git/CocoaPods/Specs.git</span><br></pre></td></tr></table></figure>

<p>如果报错<code>[!] To setup the master specs repo, please run </code>pod setup<code>.</code>说明版本太高，不允许用该方式添加源，使用克隆方式添加源:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://mirrors.tuna.tsinghua.edu.cn/git/CocoaPods/Specs.git ~/.cocoapods/repos/master</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod setup</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="6-卸载cocoapods"><a href="#6-卸载cocoapods" class="headerlink" title="6. 卸载cocoapods"></a>6. 卸载<code>cocoapods</code></h2><h3 id="6-1-查看本地cocoapods版本"><a href="#6-1-查看本地cocoapods版本" class="headerlink" title="6.1 查看本地cocoapods版本"></a>6.1 查看本地<code>cocoapods</code>版本</h3><p>查看本地所有版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gem list | grep cocoapods</span><br></pre></td></tr></table></figure>



<h3 id="6-2-卸载所有版本"><a href="#6-2-卸载所有版本" class="headerlink" title="6.2 卸载所有版本"></a>6.2 卸载所有版本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gem uninstall cocoapods</span><br></pre></td></tr></table></figure>

<p>如果安装多个版本，会提示选择要卸载的版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Select gem to uninstall:</span><br><span class="line"> 1. cocoapods-1.6.2</span><br><span class="line"> 2. cocoapods-1.10.1</span><br><span class="line"> 3. All versions</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>



<h3 id="6-3-卸载指定版本"><a href="#6-3-卸载指定版本" class="headerlink" title="6.3 卸载指定版本"></a>6.3 卸载指定版本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gem uninstall cocoapods -v 1.6.2</span><br></pre></td></tr></table></figure>



<h3 id="6-4-卸载cocoapods相关的组件"><a href="#6-4-卸载cocoapods相关的组件" class="headerlink" title="6.4 卸载cocoapods相关的组件"></a>6.4 卸载<code>cocoapods</code>相关的组件</h3><p>查看本地所有<code>cocoapods</code>相关组件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gem list --local | grep cocoapods</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cocoapods-core (1.10.1, 1.6.2)</span><br><span class="line">cocoapods-deintegrate (1.0.4)</span><br><span class="line">cocoapods-downloader (1.4.0)</span><br><span class="line">cocoapods-plugins (1.0.0)</span><br><span class="line">cocoapods-search (1.0.0)</span><br><span class="line">cocoapods-stats (1.1.0)</span><br><span class="line">cocoapods-trunk (1.5.0)</span><br><span class="line">cocoapods-try (1.2.0)</span><br></pre></td></tr></table></figure>

<p>逐个卸载：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gem uninstall cocoapods-core</span><br><span class="line">sudo gem uninstall cocoapods-deintegrate</span><br><span class="line">sudo gem uninstall cocoapods-downloader</span><br><span class="line">...</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="7-CocoaPods常用命令"><a href="#7-CocoaPods常用命令" class="headerlink" title="7. CocoaPods常用命令"></a>7. <code>CocoaPods</code>常用命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看当前使用的cocoapods版本</span><br><span class="line">pod --version</span><br><span class="line">#指定目录为pod目录,默认当前目录</span><br><span class="line">pod init [目录名]																	</span><br><span class="line">#安装第三方库</span><br><span class="line">pod install</span><br><span class="line">#更新第三方库，默认更新所有的库</span><br><span class="line">pod update [第三方库名]</span><br><span class="line">#查看哪些库有更新</span><br><span class="line">pod outdated</span><br><span class="line">#搜索指定的三方库</span><br><span class="line">pod search 第三方库名</span><br><span class="line">#查看pod源</span><br><span class="line">pod repo list</span><br><span class="line">#删除指定的源</span><br><span class="line">pod repo remove 源名称</span><br><span class="line">#添加源(只适用旧版本，新版本报错)</span><br><span class="line">pod repo add master 源地址</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>iOS</category>
        <category>CocoaPods</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>NSInvocation和performSelector的用法</title>
    <url>/2021/07/13/NSInvocation%E5%92%8CperformSelector%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p><code>NSInvocation</code>和<code>performSelector</code>是<code>OC</code>中不直接调用方法的两种方式。与通过对象直接调用方法不同的是，直接调用方法需要在编译前声明方法，否则编译器会报错；而<code>NSInvocation</code>和<code>performSelector</code>不需要，这也是<code>runtime</code>的一种应用方式。</p>
<p><code>NSInvocation</code>是<code>OC</code>的一个类，该类保存了方法所属的对象&#x2F;方法名称&#x2F;参数&#x2F;返回值，可以说一个<code>NSInvocation</code>对象就是一个方法。和方法签名类<code>NSMethodSignature</code>共同完成方法的调用。</p>
<p><code>performSelector</code>是<code>NSObject</code>类的一个实例方法，<code>OC</code>中的对象最终都继承自<code>NSObject</code>类，所以所有的对象都能通过该方法来调用指定的方法。通常先用<code>respondsToSelector</code>判断方法存在，然后在用<code>performSelector</code>调用。</p>
<p>两者区别：</p>
<ul>
<li><code>performSelector:withObject</code>，完成简单的消息调用，对于参数个数大于2或者有返回值的方法，就不太好处理</li>
<li><code>NSInvocation</code>，对参数个数没有限制，可以处理多个参数和有返回值的方法调用</li>
</ul>
<hr>
<h2 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2. 基本使用"></a>2. 基本使用</h2><h3 id="2-1-performSelector"><a href="#2-1-performSelector" class="headerlink" title="2.1 performSelector"></a>2.1 <code>performSelector</code></h3><p>根据参数个数使用指定以<code>performSelector</code>开头的方法，返回值均可以可无，如果有返回值<code>performSelector</code>方法将其返回。</p>
<ul>
<li><p>调用没有参数，没有返回值的方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (id)performSelector:(SEL)aSelector;</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用有一个参数的方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (id)performSelector:(SEL)aSelector withObject:(id)object;</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用有两个参数的方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (id)performSelector:(SEL)aSelector withObject:(id)object1 withObject:(id)object2;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-2-NSInvocation"><a href="#2-2-NSInvocation" class="headerlink" title="2.2 NSInvocation"></a>2.2 <code>NSInvocation</code></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 方法签名(方法的描述)</span><br><span class="line">NSMethodSignature *signature = [[Weakself class] instanceMethodSignatureForSelector:@selector(test3:par2:par3:)];</span><br><span class="line">if (signature == nil) &#123;</span><br><span class="line">      // 方法不存在，提示或抛出异常</span><br><span class="line">      NSLog(@&quot;%@方法不存在&quot;,NSStringFromSelector(@selector(test3:par2:par3:)));</span><br><span class="line">      return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // NSInvocation : 利用一个NSInvocation对象包装一次方法调用（方法调用者、方法名、方法参数、方法返回值）</span><br><span class="line">  NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:signature];</span><br><span class="line">  // 设置方法调用者</span><br><span class="line">  invocation.target = Weakself;</span><br><span class="line">  // 方法名，一定要和方法签名类中的一致</span><br><span class="line">  invocation.selector = @selector(test3:par2:par3:);</span><br><span class="line"></span><br><span class="line">  // 设置参数,默认已经有self和_cmd两个参数了</span><br><span class="line">  NSString *par1 = @&quot;参数1&quot;;</span><br><span class="line">  NSString *par2 = @&quot;参数2&quot;;</span><br><span class="line">  NSString *par3 = @&quot;参数3&quot;;</span><br><span class="line">  [invocation setArgument:&amp;par1 atIndex:2];</span><br><span class="line">  [invocation setArgument:&amp;par2 atIndex:3];</span><br><span class="line">  [invocation setArgument:&amp;par3 atIndex:4];</span><br><span class="line"></span><br><span class="line">  // 调用方法</span><br><span class="line">  [invocation invoke];</span><br><span class="line"></span><br><span class="line">  // 获取返回值</span><br><span class="line"> id returnValue = nil;</span><br><span class="line">  // 有返回值类型，才去获得返回值</span><br><span class="line"> if (signature.methodReturnLength) &#123;</span><br><span class="line">     [invocation getReturnValue:&amp;returnValue];</span><br><span class="line">     NSLog(@&quot;返回值:%@&quot;,returnValue);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<p>附：<a href="https://github.com/Code0o5/NSInvocationDemo">源码下载</a></p>
]]></content>
      <categories>
        <category>iOS</category>
        <category>OC</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>NSInvocation</tag>
      </tags>
  </entry>
  <entry>
    <title>Trojan服务端搭建教程</title>
    <url>/2021/06/22/Trojan%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="1-检查SELinux状态"><a href="#1-检查SELinux状态" class="headerlink" title="1. 检查SELinux状态"></a>1. 检查<code>SELinux</code>状态</h2><p><code>SELinux</code>开启时容易导致证书申请失败，所以要保证为关闭状态。</p>
<ul>
<li><p>查看<code>SELinux</code>状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/sbin/sestatus -v</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果返回<code>enabled</code>表示开启，修改<code>/etc/selinux/config</code>文件，将<code>SELINUX=enforcing</code>改为<code>SELINUX=disabled</code></p>
</li>
<li><p>重启VPS</p>
</li>
</ul>
<hr>
<h2 id="2-安装依赖环境"><a href="#2-安装依赖环境" class="headerlink" title="2. 安装依赖环境"></a>2. 安装依赖环境</h2><p><code>CentOS</code>系统：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install wget</span><br></pre></td></tr></table></figure>



<p><code>Debian</code>系统：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install wget</span><br></pre></td></tr></table></figure>





<hr>
<h2 id="3-安装trojan"><a href="#3-安装trojan" class="headerlink" title="3. 安装trojan"></a>3. 安装<code>trojan</code></h2><ul>
<li><p>第一步，安装相关服务，绑定域名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/V2RaySSR/Trojansh/master/trojan1.sh&quot; &amp;&amp; chmod +x trojan1.sh &amp;&amp; ./trojan1.sh</span><br></pre></td></tr></table></figure>

<p>中途提示处输入绑定VPS的域名，自动安装Ngix并下载伪站点。</p>
</li>
<li><p>第二步，自动申请<code>SSL</code>证书，如果证书申请失败，请按照提示手动申请证书</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/V2RaySSR/Trojansh/master/trojan2.sh&quot; &amp;&amp; chmod +x trojan2.sh &amp;&amp; ./trojan2.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>第三步</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/V2RaySSR/Trojansh/master/trojan3.sh&quot; &amp;&amp; chmod +x trojan3.sh &amp;&amp; ./trojan3.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>trojan配置文件位置：<code>/usr/local/etc/trojan/config.json</code></p>
</li>
<li><p>重启trojan</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart trojan</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="4-安装BBR加速"><a href="#4-安装BBR加速" class="headerlink" title="4. 安装BBR加速"></a>4. 安装BBR加速</h2><ul>
<li><p>下载脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加可执行权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x tcp.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装BBR魔改版</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo -e &quot;1&quot; | ./tcp.sh</span><br></pre></td></tr></table></figure>

<p>安装完成提示重启VPS</p>
</li>
<li><p>开启BBR魔改版加速</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo -e &quot;5&quot; | ./tcp.sh</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>经验分享</category>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS基础面试题</title>
    <url>/2021/07/12/iOS%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1-OC内存管理机制是什么？"><a href="#1-OC内存管理机制是什么？" class="headerlink" title="1. OC内存管理机制是什么？"></a>1. OC内存管理机制是什么？</h2><ul>
<li><p>答案</p>
<blockquote>
<p>Objective-C 是通过一种”referring counting”(引用计数)的方式来管理内存的, 对象在开始分配内存(alloc)的时候引用计数为一,以后每当碰到有copy,retain的时候引用计数都会加一, 每当碰到release和autorelease的时候引用计数就会减一,如果此对象的计数变为了0, 就会被系统销毁。</p>
</blockquote>
</li>
</ul>
<hr>
<h2 id="2-iOS自动释放池是什么-如何工作-？"><a href="#2-iOS自动释放池是什么-如何工作-？" class="headerlink" title="2. iOS自动释放池是什么,如何工作 ？"></a>2. iOS自动释放池是什么,如何工作 ？</h2><ul>
<li><p>答案</p>
<blockquote>
<p>当您向一个对象发送一个autorelease消息时，Cocoa就会将该对象的一个引用放入到最新的自动释放池。它仍然是个正当的对象，因此自动释放池定义的作用域内的其它对象可以向它发送消息。当程序执行到作用域结束的位置时，自动释放池就会被释放，池中的所有对象也就被释放。</p>
</blockquote>
</li>
<li><p>说明</p>
<blockquote>
<p>NSAutoreleasePool 是用来做引用计数的管理工作的,这个东西一般不用你管的.</p>
<p>autorelease和release没什么区别,只是引用计数减一的时机不同而已,autorelease会在对象的使用真正结束的时候才做引用计数减一.</p>
</blockquote>
</li>
</ul>
<hr>
<h2 id="3-UIButton对其target是否会产生循环引用"><a href="#3-UIButton对其target是否会产生循环引用" class="headerlink" title="3. UIButton对其target是否会产生循环引用"></a>3. <code>UIButton</code>对其<code>target</code>是否会产生循环引用</h2><ul>
<li><p>答案</p>
<blockquote>
<p>不会。</p>
<p>在<code>iOS</code>的<code>Target-Action</code>模式中, <code>UIControl</code>(如<code>UIButton</code>)对其<code>target</code>的持有方式是<code>weakRetained</code>的方式, 因此不会存在循环引用.</p>
<p>而<code>NSTimer</code>对其<code>target</code>持有的方式是<code>autorelease</code>方式, 即<code>target</code>会在其指定的<code>runloop</code>下一次执行时查看是否进行释放. 若<code>repeats</code>参数为<code>YES</code>, 则<code>timer</code>未释放情况下, <code>target</code>不会释放, 因而会引起循环引用; 若<code>repeats</code>参数设置为<code>NO</code>, 则<code>target</code>可以被释放而不会存在循环引用.</p>
</blockquote>
</li>
</ul>
<hr>
<h2 id="3-iOS类别的作用？继承和类别在实现中有何区别？"><a href="#3-iOS类别的作用？继承和类别在实现中有何区别？" class="headerlink" title="3. iOS类别的作用？继承和类别在实现中有何区别？"></a>3. iOS类别的作用？继承和类别在实现中有何区别？</h2><ul>
<li><p>答案</p>
<blockquote>
<p>category 可以在不获悉，不改变原来代码的情况下往里面添加新的方法，只能添加，不能删除修改。 并且如果类别和原来类中的方法产生名称冲突，则类别将覆盖原来的方法，因为类别具有更高的优先级。</p>
<p>继承可以增加，修改或者删除方法，并且可以增加属性。</p>
</blockquote>
</li>
<li><p>类别主要有3个作用：</p>
<ol>
<li>将类的实现分散到多个不同文件或多个不同框架中。</li>
<li>声明私有方法，某一个方法只实现，不声明，相当于私有方法。</li>
<li>向对象添加非正式协议。（非正式协议也就是类别）</li>
</ol>
</li>
</ul>
<hr>
<h2 id="4-从输入url到页面展示到底发生了什么"><a href="#4-从输入url到页面展示到底发生了什么" class="headerlink" title="4. 从输入url到页面展示到底发生了什么"></a>4. 从输入url到页面展示到底发生了什么</h2><ul>
<li><p>答案</p>
<blockquote>
<ol>
<li>输入地址</li>
<li>浏览器查找域名的 IP 地址　</li>
<li>浏览器向 web 服务器发送一个 HTTP 请求</li>
<li>服务器的永久重定向响应</li>
<li>浏览器跟踪重定向地址</li>
<li>服务器处理请求</li>
<li>服务器返回一个 HTTP 响应</li>
<li>浏览器显示 HTML</li>
<li>浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等）</li>
</ol>
</blockquote>
</li>
</ul>
<hr>
<h2 id="5-iOS中持久化方式有哪些？"><a href="#5-iOS中持久化方式有哪些？" class="headerlink" title="5. iOS中持久化方式有哪些？"></a>5. iOS中持久化方式有哪些？</h2><ul>
<li><p>答案</p>
<blockquote>
<ol>
<li>属性列表文件<code>NSUserDefaults</code>的存储：实际是本地生成一个<code>plist</code>文件，将所需属性存储在<code>plist</code>文件中</li>
<li>对象归档：本地创建文件并写入数据，文件类型不限</li>
<li>SQLite 数据库：本地创建数据库文件，进行数据处理</li>
<li>CoreData：同数据库处理思想相同，但实现方式不同</li>
</ol>
</blockquote>
</li>
</ul>
<hr>
<h2 id="6-你在开发过程中常用到哪些定时器，定时器时间会有误差吗，如果有，为什么会有误差？"><a href="#6-你在开发过程中常用到哪些定时器，定时器时间会有误差吗，如果有，为什么会有误差？" class="headerlink" title="6. 你在开发过程中常用到哪些定时器，定时器时间会有误差吗，如果有，为什么会有误差？"></a>6. 你在开发过程中常用到哪些定时器，定时器时间会有误差吗，如果有，为什么会有误差？</h2><ul>
<li><p>答案</p>
<blockquote>
<p>iOS中常用的定时器有<code>NSTimer</code>、<code>CADisplayLink</code>、<code>GCD定时器</code>，其中<code>NSTimer</code>、<code>CADisplayLink</code>基于<code>NSRunLoop</code>实现，故存在误差，<code>GCD定时器</code>只依赖系统内核，相对一前两者是比较准时的。</p>
</blockquote>
<blockquote>
<p>误差原因是：与<code>NSRunLoop</code>机制有关， 因为<code>RunLoop</code>每跑完一次圈再去检查当前累计时间是否已经达到定时设置的间隔时间，如果未达到，RunLoop将进入下一轮任务，待任务结束之后再去检查当前累计时间，而此时的累计时间可能已经超过了定时器的间隔时间，故会存在误差。</p>
</blockquote>
</li>
</ul>
<hr>
<h2 id="7-怎样防止指针的越界使用问题"><a href="#7-怎样防止指针的越界使用问题" class="headerlink" title="7. 怎样防止指针的越界使用问题?"></a>7. 怎样防止指针的越界使用问题?</h2><ul>
<li><p>答案</p>
<blockquote>
<p>必须让指针指向一个有效的内存地址</p>
<ol>
<li>防止数组越界</li>
<li>防止向一块内存中拷贝过多的内容</li>
<li>防止使用空指针</li>
<li>防止改变const修改的指针</li>
<li>防止改变指向静态存储区的内容</li>
<li>防止两次释放一个指针</li>
<li>防止使用野指针.</li>
</ol>
</blockquote>
</li>
</ul>
<hr>
<h2 id="8-iOS你在项目中用过-runtime-吗？举个例子"><a href="#8-iOS你在项目中用过-runtime-吗？举个例子" class="headerlink" title="8. iOS你在项目中用过 runtime 吗？举个例子"></a>8. iOS你在项目中用过 runtime 吗？举个例子</h2><ul>
<li><p>答案</p>
<blockquote>
<p>Objective-C 语言是一门动态语言，编译器不需要关心接受消息的对象是何种类型，接收消息的对象问题也要在运行时处理。</p>
</blockquote>
<blockquote>
<p>pragramming 层面的 runtime 主要体现在以下几个方面：</p>
<ol>
<li>关联对象 Associated Objects</li>
<li>消息发送 Messaging</li>
<li>消息转发 Message Forwarding</li>
<li>方法调配 Method Swizzling</li>
<li>“类对象” NSProxy Foundation | Apple Developer Documentation</li>
<li>KVC、KVO About Key-Value Coding</li>
</ol>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
        <category>OC</category>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS多线程面试题</title>
    <url>/2021/06/30/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1-什么是GCD-？谈谈你对GCD的理解？"><a href="#1-什么是GCD-？谈谈你对GCD的理解？" class="headerlink" title="1. 什么是GCD ？谈谈你对GCD的理解？"></a>1. 什么是GCD ？谈谈你对GCD的理解？</h2><ul>
<li><p>答案</p>
<blockquote>
<p>GCD是Grand Central Dispatch的缩写。</p>
<p>Grand Central Dispatch (GCD)是Apple开发的一个多核编程的较新的解决方法。在Mac OS X 10.6雪豹中首次推出，并在最近引入到了iOS4.0。</p>
<p>GCD是一个替代诸如NSThread等技术的很高效和强大的技术。GCD完全可以处理诸如数据锁定和资源泄漏等复杂的异步编程问题。</p>
</blockquote>
</li>
<li><p>简单使用，异步执行任务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 创建一个队列</span><br><span class="line">    dispatch_queue_t myQueue =  dispatch_queue_create(&quot;com.iphonedevblog.post&quot;,  NULL);</span><br><span class="line">    // 异步执行任务</span><br><span class="line">    dispatch_async(myQueue, ^&#123;</span><br><span class="line">        NSLog(@&quot;线程:%@&quot;,[NSThread currentThread]);</span><br><span class="line">        </span><br><span class="line">        // 回到主队列更新界面</span><br><span class="line">        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            self.view.backgroundColor = [UIColor redColor];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<blockquote>
<p><strong>线程:&lt;NSThread: 0x6000024b1180&gt;{number &#x3D; 7, name &#x3D; (null)}</strong></p>
</blockquote>
</li>
<li><p>线程的暂停和恢复（只能在子线程，主线程不起作用）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dispatch_suspend(&lt;#dispatch_object_t  _Nonnull object#&gt;) // 暂停线程</span><br><span class="line">dispatch_resume(&lt;#dispatch_object_t  _Nonnull object#&gt;)  // 恢复线程</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
        <category>OC</category>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>GCP实例创建使用</title>
    <url>/2021/06/22/GCP%E5%AE%9E%E4%BE%8B%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="1-创建防火墙规则"><a href="#1-创建防火墙规则" class="headerlink" title="1.  创建防火墙规则"></a>1.  创建防火墙规则</h2><ul>
<li><p>前往<a href="https://console.cloud.google.com/">谷歌云</a>，在菜单栏找到<code>VPC网络-&gt;防火墙</code></p>
<p><img src="http://res.yycode.top:8001/backup/blogImages/GCP%E5%AE%9E%E4%BE%8B%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/QQ20210622-105655@2x.png"></p>
</li>
<li><p>点击创建防火墙规则，分别创建入站和出站规则</p>
<p><img src="http://res.yycode.top:8001/backup/blogImages/GCP%E5%AE%9E%E4%BE%8B%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/QQ20210622-110453@2x.png"></p>
</li>
</ul>
<hr>
<h2 id="2-创建虚拟机实例"><a href="#2-创建虚拟机实例" class="headerlink" title="2. 创建虚拟机实例"></a>2. 创建虚拟机实例</h2><ul>
<li><p>菜单栏找到<code>compute engine -&gt; 虚拟机实例</code></p>
<p><img src="http://res.yycode.top:8001/backup/blogImages/GCP%E5%AE%9E%E4%BE%8B%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/QQ20210622-110630@2x.png"></p>
</li>
<li><p>点击创建实例，填写实例名称，选择地区和区域，机器配置选择最低配置的N1型，内存选614MB</p>
<p><img src="http://res.yycode.top:8001/backup/blogImages/GCP%E5%AE%9E%E4%BE%8B%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/QQ20210622-111350@2x.png"></p>
</li>
<li><p>启动磁盘处选择系统类型，防火墙勾选允许http流量和https流量，添加入站和出站规则</p>
<p><img src="http://res.yycode.top:8001/backup/blogImages/GCP%E5%AE%9E%E4%BE%8B%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/QQ20210622-111720@2x.png"></p>
</li>
<li><p>点击创建，完成实例创建</p>
</li>
</ul>
<hr>
<h2 id="3-实例配置"><a href="#3-实例配置" class="headerlink" title="3. 实例配置"></a>3. 实例配置</h2><p>完成实例创建，还需要对虚拟机实例设置允许root登录，设置root密码才能在其他的终端通过ssh远程链接。</p>
<h3 id="3-1-设置静态IP"><a href="#3-1-设置静态IP" class="headerlink" title="3.1 设置静态IP"></a>3.1 设置静态IP</h3><p>谷歌云实例默认是临时IP，实例重启以后IP可能会变，需要设置成静态IP。</p>
<ul>
<li><p>菜单栏找到<code>VPC网络-&gt;外部IP地址</code></p>
<p><img src="http://res.yycode.top:8001/backup/blogImages/GCP%E5%AE%9E%E4%BE%8B%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/QQ20210622-112432@2x.png"></p>
</li>
<li><p>找到对应实例，设置IP为静态</p>
<p><img src="http://res.yycode.top:8001/backup/blogImages/GCP%E5%AE%9E%E4%BE%8B%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/QQ20210622-112552@2x.png"></p>
</li>
<li><p>设置静态IP完成</p>
</li>
</ul>
<h3 id="3-2-允许root登录配置"><a href="#3-2-允许root登录配置" class="headerlink" title="3.2  允许root登录配置"></a>3.2  允许root登录配置</h3><ul>
<li><p>点击实例后的<code>SSH</code>链接，在弹出的窗口中允许权限</p>
</li>
<li><p>连接上以后，获取管理员权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>/etc/ssh/sshd_config</code>文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改以下项为<code>yes</code></p>
<p><img src="http://res.yycode.top:8001/backup/blogImages/GCP%E5%AE%9E%E4%BE%8B%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/QQ20210622-113702@2x.png"></p>
<p><img src="http://res.yycode.top:8001/backup/blogImages/GCP%E5%AE%9E%E4%BE%8B%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/QQ20210622-113726@2x.png"></p>
</li>
<li><p>修改完成，保存退出</p>
</li>
<li><p>设置root密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">passwd root</span><br></pre></td></tr></table></figure>
</li>
<li><p>两次输入密码，完成root密码设置</p>
</li>
<li><p>在谷歌云虚拟机实例列表，重启实例。然后就可以在其他终端通过root账号和密码远程登录虚拟机实例。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>VPS</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>VPS</tag>
        <tag>GCP</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift基础面试题</title>
    <url>/2021/06/30/Swift%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1-iOS-类（class）和结构体（struct）有什么区别？"><a href="#1-iOS-类（class）和结构体（struct）有什么区别？" class="headerlink" title="1. iOS 类（class）和结构体（struct）有什么区别？"></a>1. iOS 类（class）和结构体（struct）有什么区别？</h2><ul>
<li><p>答案</p>
<blockquote>
<p>Swift 中，类是引用类型，结构体是值类型。值类型在传递和赋值时将进行复制，而引用类型则只会使用引用对象的一个”指向”。所以他们两者之间的区别就是两个类型的区别。</p>
</blockquote>
</li>
<li><p>示例1，类引用和传值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Temperature &#123;</span><br><span class="line">  var value: Float = 37.0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person &#123;</span><br><span class="line">  var temp: Temperature?</span><br><span class="line"></span><br><span class="line">  func sick() &#123;</span><br><span class="line">    temp?.value = 41.0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let A = Person()</span><br><span class="line">let B = Person()</span><br><span class="line">let temp = Temperature()</span><br><span class="line"></span><br><span class="line">A.temp = temp</span><br><span class="line">B.temp = temp</span><br><span class="line">A.sick()</span><br><span class="line">print(&quot;\(String(describing: A.temp?.value))&quot;)</span><br><span class="line">print(&quot;\(String(describing: B.temp?.value))&quot;)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<blockquote>
<p><strong>Optional(41.0)</strong></p>
<p><strong>Optional(41.0)</strong></p>
</blockquote>
</li>
<li><p>示例2，结构体引用和传值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct Temperature &#123;</span><br><span class="line">  var value: Float = 37.0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person &#123;</span><br><span class="line">  var temp: Temperature?</span><br><span class="line"></span><br><span class="line">  func sick() &#123;</span><br><span class="line">    temp?.value = 41.0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let A = Person()</span><br><span class="line">let B = Person()</span><br><span class="line">let temp = Temperature()</span><br><span class="line"></span><br><span class="line">A.temp = temp</span><br><span class="line">B.temp = temp</span><br><span class="line">A.sick()</span><br><span class="line">print(&quot;\(String(describing: A.temp?.value))&quot;)</span><br><span class="line">print(&quot;\(String(describing: B.temp?.value))&quot;)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<blockquote>
<p><strong>Optional(41.0)</strong></p>
<p><strong>Optional(37.0)</strong></p>
</blockquote>
</li>
<li><p>说明</p>
<blockquote>
<p>内存中，引用类型诸如类是在堆（heap）上，而值类型诸如结构体实在栈（stack）上进行存储和操作。相比于栈上的操作，堆上的操作更加复杂耗时，所以苹果官方推荐使用结构体，这样可以提高 App 运行的效率。</p>
</blockquote>
<blockquote>
<p><strong>class有这几个功能struct没有的：</strong></p>
<p>class可以继承，这样子类可以使用父类的特性和方法 类型转换可以在runtime的时候检查和解释一个实例的类型 可以用deinit来释放资源，一个类可以被多次引用</p>
</blockquote>
<blockquote>
<p><strong>struct也有这样几个优势：</strong></p>
<p>结构较小，适用于复制操作，相比于一个class的实例被多次引用更加安全。 无须担心内存memory leak或者多线程冲突问题</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
        <category>Swift</category>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>swift</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS定时器使用总结</title>
    <url>/2021/06/28/iOS%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><code>iOS</code>定时器主要有以下三种：</p>
<ol>
<li><code>NSTimer</code></li>
<li><code>CADisplayLink</code></li>
<li><code>dispatch_source_t</code></li>
</ol>
<p>其中<code>NSTimer</code>和<code>CADisplayLink</code>是基于<code>NSRunLoop</code>实现的，而<code>RunLoop</code>会在跑完一圈再去检查定时器是否满足规定的时间间隔，如果未达到，<code>RunLoop</code>会进入下一轮任务处理，这就可能导致定时器存在计数误差，<code>dispatch_source_t</code>是<code>GCD</code>内封装的定时器，只依赖于系统内核，所以较准时。</p>
<h2 id="1-NSTimer用法"><a href="#1-NSTimer用法" class="headerlink" title="1. NSTimer用法"></a>1. <code>NSTimer</code>用法</h2><h3 id="1-1-创建NSTimer"><a href="#1-1-创建NSTimer" class="headerlink" title="1.1 创建NSTimer"></a>1.1 创建<code>NSTimer</code></h3><ul>
<li><p>通过<code>scheduledTimer</code>开头的类方法创建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[NSTimer scheduledTimerWithTimeInterval:1.0 repeats:YES block:^(NSTimer * _Nonnull timer) &#123;</span><br><span class="line">     NSLog(@&quot;111&quot;);</span><br><span class="line">&#125;];</span><br><span class="line">或</span><br><span class="line">[NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(timerAction) userInfo:nil repeats:YES];</span><br></pre></td></tr></table></figure>

<p><code>timeInterval</code>执行之前等待的时间。该方法会自动创建<code>NSTimer</code>对象，并加入主线程的<code>RunLoop</code>的<code>default mode</code>上，然后自动启动，执行指定的代码。</p>
</li>
<li><p>通过<code>timerWithTimeInterval</code>开头的类方法创建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NSTimer *timer = [NSTimer timerWithTimeInterval:1.0 repeats:YES block:^(NSTimer * _Nonnull timer) &#123;</span><br><span class="line">     NSLog(@&quot;111&quot;);</span><br><span class="line">&#125;];</span><br><span class="line">[[NSRunLoop mainRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode];</span><br><span class="line">或者</span><br><span class="line">NSTimer *timer = [NSTimer timerWithTimeInterval:1.0 target:self selector:@selector(timerAction) userInfo:nil repeats:YES];</span><br><span class="line">[[NSRunLoop mainRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode];</span><br></pre></td></tr></table></figure>

<p>该方法只创建并返回一个定时器，不会把定时器加入<code>RunLoop</code>，需要手动添加到<code>RunLoop</code>，然后自动启动，执行指定的代码。</p>
</li>
</ul>
<h3 id="1-2-NSTimer启动和停止"><a href="#1-2-NSTimer启动和停止" class="headerlink" title="1.2 NSTimer启动和停止"></a>1.2 <code>NSTimer</code>启动和停止</h3><ul>
<li><p>启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[self.timer fire]; // 测试发现没什么用</span><br><span class="line">self.timer.fireDate = [NSDate distantPast]; // 和self.timer.fireDate = [NSDate distantFuture];对应</span><br></pre></td></tr></table></figure>
</li>
<li><p>停止</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">self.timer.fireDate = [NSDate distantFuture];</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置计时器无效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[self.timer invalidate]; </span><br></pre></td></tr></table></figure>

<p>只有设置定时器无效，定时器对当前控制器的持有才会释放，才不会出现循环引用的情况，就算设置定时器为<code>nil</code>，也不行；所以通常在<code>viewWillDisappear</code>方法中设置定时器无效。</p>
</li>
</ul>
<h3 id="1-3-注意事项"><a href="#1-3-注意事项" class="headerlink" title="1.3 注意事项"></a>1.3 注意事项</h3><p><code>1.1</code>中创建<code>NSTimer</code>的两种方法中，可能会导致<code>NSTimer</code>对象和当前控制器对象循环引用：</p>
<ul>
<li><p>如果是<code>block</code>形式执行指定的代码，<code>NSTimer</code>对象不会持有当前控制器对象，即使在控制器要销毁的时候，不停止并销毁定时器也不影响控制器的释放，因为<code>NSTimer</code>对象没有持有控制器，控制器能正常释放，释放以后定时器还能继续执行指定的代码，因为主<code>RunLoop</code>对象持有了定时器，定时器并没有被释放。</p>
</li>
<li><p>如果是<code>target</code>方式指定执行代码，<code>NSTimer</code>会持有当前控制器，如果在控制器释放前不销毁定时器，解除<code>NSTimer</code>对象对控制器的持有，那么将会出现循环引用，导致控制器和<code>NSTimer</code>对象都不能释放。</p>
</li>
<li><p><code>NSTimer</code>对其<code>target</code>持有的方式是<code>autorelease</code>方式, 即<code>target</code>会在其指定的<code>runloop</code>下一次执行时查看是否进行释放， 若<code>repeats</code>参数为<code>YES</code>, 则<code>timer</code>未释放情况下, <code>target</code>不会释放, 因而会引起循环引用; 若<code>repeats</code>参数设置为<code>NO</code>, 则<code>target</code>可以被释放而不会存在循环引用.</p>
</li>
<li><p><code>NSTimer</code>引发循环引用原理</p>
<blockquote>
<p>Current RunLoop -&gt; CFRunLoopMode -&gt; sources数组 -&gt; __NSCFTimer -&gt; _NSTimerBlockTarget -&gt; self</p>
</blockquote>
</li>
</ul>
<h3 id="1-4-NSTimer循环引用解决方案"><a href="#1-4-NSTimer循环引用解决方案" class="headerlink" title="1.4 NSTimer循环引用解决方案"></a>1.4 <code>NSTimer</code>循环引用解决方案</h3><ul>
<li><p>引入<code>WeakContainer</code>，弱持有<code>target</code>对象</p>
<ul>
<li><p>新建<code>WeakContainer</code>类，内部弱持有<code>target</code>，并转发消息</p>
<p><code>WeakContainer.h</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_BEGIN</span><br><span class="line"></span><br><span class="line">@interface WeakContainer : NSObject</span><br><span class="line"></span><br><span class="line">@property (nonatomic, weak) id target;</span><br><span class="line"></span><br><span class="line">- (instancetype)initWithTarget:(id)target;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure>

<p><code>WeakContainer.m</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &quot;WeakContainer.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation WeakContainer</span><br><span class="line"></span><br><span class="line">- (instancetype)initWithTarget:(id)target</span><br><span class="line">&#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        self.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 消息转发</span><br><span class="line">- (id)forwardingTargetForSelector:(SEL)aSelector</span><br><span class="line">&#123;</span><br><span class="line">    if ([self.target respondsToSelector:aSelector]) &#123;</span><br><span class="line">        return self.target;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return [super forwardingTargetForSelector:aSelector];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置定时器<code>target</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">self.timer = [NSTimer scheduledTimerWithTimeInterval:1.0 target:[[WeakContainer alloc]initWithTarget:self] selector:@selector(timerAction) userInfo:nil repeats:YES];</span><br></pre></td></tr></table></figure>
</li>
<li><p>在控制器的<code>dealloc</code>方法中停止定时器，否则控制器释放，定时器还在运行，导致程序崩溃</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)dealloc</span><br><span class="line">&#123;</span><br><span class="line">    self.timer.fireDate = [NSDate distantFuture];</span><br><span class="line">    NSLog(@&quot;释放了%s&quot;,__FUNCTION__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用<code>NSProxy</code>抽象类</p>
<blockquote>
<p>NSProxy是除了NSObject之外的另一个基类，是一个抽象类，只能继承它，重写其消息转发的方法，将消息转发给另一个对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)forwardInvocation:(NSInvocation *)invocation;</span><br><span class="line">- (nullable NSMethodSignature *)methodSignatureForSelector:(SEL)sel NS_SWIFT_UNAVAILABLE(&quot;NSInvocation and related APIs not available&quot;);</span><br></pre></td></tr></table></figure>

<p>除了重载消息转发机制的两个方法之外，NSProxy也没有其他功能了。即，使用NSProxy注定是用来转发消息的。</p>
<ul>
<li>NSProxy可以用来模拟多继承，proxy对象处理多个不同Class对象的消息。</li>
<li>继承自NSProxy的代理类会自动转发消息，而继承自NSObject的则不会，需要自行根据消息转发机制来进行处理。</li>
<li>NSObject的Category中的方法不能转发</li>
</ul>
</blockquote>
<ul>
<li><p>创建<code>WeakProxy</code>类</p>
<p><code>WeakProxy.h</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_BEGIN</span><br><span class="line"></span><br><span class="line">@interface WeakProxy : NSProxy</span><br><span class="line"></span><br><span class="line">@property (nonatomic, weak) id target;</span><br><span class="line"></span><br><span class="line">- (instancetype)initWithTarget:(id)target;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure>

<p><code>WeakProxy.m</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &quot;WeakProxy.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation WeakProxy</span><br><span class="line"></span><br><span class="line">- (instancetype)initWithTarget:(id)target</span><br><span class="line">&#123;</span><br><span class="line">    self = [WeakProxy alloc];</span><br><span class="line">    self.target = target;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSMethodSignature *)methodSignatureForSelector:(SEL)sel &#123;</span><br><span class="line">    return [self.target methodSignatureForSelector:sel];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)forwardInvocation:(NSInvocation *)invocation &#123;</span><br><span class="line">    [invocation invokeWithTarget:self.target];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>


</li>
<li><p>设置定时器同<code>WeakContainer</code>方式</p>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="2-CADisplayLink用法"><a href="#2-CADisplayLink用法" class="headerlink" title="2. CADisplayLink用法"></a>2. <code>CADisplayLink</code>用法</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p><code>CADisplayLink</code>是和屏幕刷新率同步的频率调用<code>target</code>的，按照iOS设备屏幕的刷新率60次&#x2F;秒，就是一秒调用60次<code>target</code>。<code>CADisplayLink</code>以特定模式注册到<code>Runloop</code>后，每当屏幕显示内容刷新结束的时候，<code>Runloop</code>就会向<code>CADisplayLink</code>指定的<code>target</code>发送一次指定的<code>selector</code>消息， <code>CADisplayLink</code>类对应的<code>selector</code>就会被调用一次。</p>
<p>延迟iOS设备的屏幕刷新频率是固定的，CADisplayLink在正常情况下会在每次刷新结束都被调用，精确度相当高。但如果调用的方法比较耗时，超过了屏幕刷新周期，就会导致跳过若干次回调调用机会。如果CPU过于繁忙，无法保证屏幕60次&#x2F;秒的刷新率，就会导致跳过若干次调用回调方法的机会，跳过次数取决CPU的忙碌程度。</p>
<h3 id="2-2-使用场景"><a href="#2-2-使用场景" class="headerlink" title="2.2 使用场景"></a>2.2 使用场景</h3><p>从原理上可以看出，CADisplayLink适合做界面的不停重绘，比如视频播放的时候需要不停地获取下一帧用于界面渲染。</p>
<h3 id="2-3-基本使用"><a href="#2-3-基本使用" class="headerlink" title="2.3 基本使用"></a>2.3 基本使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">self.displayLink = [CADisplayLink displayLinkWithTarget:self selector:@selector(timerAction)];</span><br><span class="line">[self.displayLink addToRunLoop:[NSRunLoop mainRunLoop] forMode:NSDefaultRunLoopMode];</span><br></pre></td></tr></table></figure>

<p>添加到<code>RunLoop</code>以后，定时器就开始调用<code>target</code>。</p>
<h3 id="2-4-主要属性和方法"><a href="#2-4-主要属性和方法" class="headerlink" title="2.4 主要属性和方法"></a>2.4 主要属性和方法</h3><ul>
<li><code>preferredFramesPerSecond属性</code>：每秒调用<code>target</code>的次数，默认和每秒屏幕刷新次数一致，也就是60，设置该属性为1以后，每一秒调用一次<code>target</code></li>
<li><code>paused属性</code>：判断定时器是否处于暂停状态（getter方法），设置定时器暂停和恢复（setter方法）</li>
<li><code>invalidate方法</code>：设置定时器无效，和<code>NSTimer</code>的该方法效果相同</li>
</ul>
<h3 id="2-5-注意事项"><a href="#2-5-注意事项" class="headerlink" title="2.5 注意事项"></a>2.5 注意事项</h3><p>和<code>NSTimer</code>一样，都有可能出现循环引用，切记在控制器消失时调用<code>invalidate</code>方法。</p>
<hr>
<h2 id="3-dispatch-source-t用法"><a href="#3-dispatch-source-t用法" class="headerlink" title="3. dispatch_source_t用法"></a>3. <code>dispatch_source_t</code>用法</h2><h3 id="3-1-基本使用"><a href="#3-1-基本使用" class="headerlink" title="3.1 基本使用"></a>3.1 基本使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//创建全局队列</span><br><span class="line">dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</span><br><span class="line"></span><br><span class="line">//使用全局队列创建计时器</span><br><span class="line">_sourceTimer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, queue);</span><br><span class="line"></span><br><span class="line">//定时器延迟时间</span><br><span class="line">NSTimeInterval delayTime = 1.0f;</span><br><span class="line"></span><br><span class="line">//定时器间隔时间</span><br><span class="line">NSTimeInterval timeInterval = 1.0f;</span><br><span class="line"></span><br><span class="line">//设置开始时间</span><br><span class="line">dispatch_time_t startDelayTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayTime * NSEC_PER_SEC));</span><br><span class="line"></span><br><span class="line">//设置计时器</span><br><span class="line">dispatch_source_set_timer(_sourceTimer,startDelayTime,timeInterval*NSEC_PER_SEC,0.1*NSEC_PER_SEC);</span><br><span class="line"></span><br><span class="line">//执行事件</span><br><span class="line">dispatch_source_set_event_handler(_sourceTimer,^&#123;</span><br><span class="line">    NSLog(@&quot;111&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//启动计时器</span><br><span class="line">dispatch_resume(_sourceTimer);</span><br></pre></td></tr></table></figure>



<h3 id="3-2-关键函数"><a href="#3-2-关键函数" class="headerlink" title="3.2 关键函数"></a>3.2 关键函数</h3><ul>
<li><p>设置定时器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dispatch_source_set_timer(dispatch_source_t source, </span><br><span class="line">                          dispatch_time_t start,</span><br><span class="line">                          uint64_t interval, </span><br><span class="line">                          uint64_t leeway);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>start</code>：计时器起始时间，可以通过<code>dispatch_time</code>创建，如果使用<code>DISPATCH_TIME_NOW</code>，则创建后立即执行</li>
<li><code>interval</code>：计时器间隔时间，可以通过<code>timeInterval * NSEC_PER_SEC</code>来设置，其中<code>timeInterval</code>为对应的秒数</li>
<li><code>leeway</code>：希望定时器的准确程度。这个参数告诉系统我们需要计时器触发的精准程度。所有的计时器都不会保证100%精准，这个参数用来告诉系统你希望系统保证精准的努力程度。如果你希望一个计时器没五秒触发一次，并且越准越好，那么你传递0为参数。另外，如果是一个周期性任务，比如检查email，那么你会希望每十分钟检查一次，但是不用那么精准。所以你可以传入60，告诉系统60秒的误差是可接受的。这样有什么意义呢？简单来说，就是降低资源消耗。如果系统可以让cpu休息足够长的时间，并在每次醒来的时候执行一个任务集合，而不是不断的醒来睡去以执行任务，那么系统会更高效。如果传入一个比较大的leeway给你的计时器，意味着你允许系统拖延你的计时器来将计时器任务与其他任务联合起来一起执行。</li>
</ul>
</li>
<li><p>暂停定时器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dispatch_suspend(dispatch_object_t object);</span><br></pre></td></tr></table></figure>
</li>
<li><p>销毁（停止）计时器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//销毁定时器</span><br><span class="line">dispatch_source_cancel(_sourceTimer);</span><br></pre></td></tr></table></figure>
</li>
<li><p>销毁定时器时调用函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dispatch_source_set_cancel_handler(dispatch_source_t source,</span><br><span class="line">	dispatch_block_t _Nullable handler);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-3-相比前两个定时器优点"><a href="#3-3-相比前两个定时器优点" class="headerlink" title="3.3 相比前两个定时器优点"></a>3.3 相比前两个定时器优点</h3><ul>
<li>时间准确，误差小</li>
<li>可以使用子线程，解决定时器跑在主线程上卡UI问题</li>
</ul>
<h3 id="3-4-注意事项"><a href="#3-4-注意事项" class="headerlink" title="3.4 注意事项"></a>3.4 注意事项</h3><p>需要将定时器设置为成员变量，且用<code>strong</code>修饰，不然会立即释放，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@property (nonatomic, strong) dispatch_source_t sourceTimer;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>iOS</category>
        <category>OC</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>OC</tag>
      </tags>
  </entry>
  <entry>
    <title>cocoapods公有库制作</title>
    <url>/2021/04/19/cocoapods%E5%85%AC%E6%9C%89%E5%BA%93%E5%88%B6%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="1-Pod库源码制作"><a href="#1-Pod库源码制作" class="headerlink" title="1. Pod库源码制作"></a>1. <code>Pod</code>库源码制作</h2><h3 id="1-1-下载Cocoapods模板"><a href="#1-1-下载Cocoapods模板" class="headerlink" title="1.1 下载Cocoapods模板"></a>1.1 下载<code>Cocoapods</code>模板</h3><p>执行如下命令，创建一个<code>Pod</code>库项目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod lib create pod库名</span><br></pre></td></tr></table></figure>

<p>根据提示填写库的信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  测试demo  pod lib create HYTestPods</span><br><span class="line">Cloning `https://github.com/CocoaPods/pod-template.git` into `HYTestPods`.</span><br><span class="line">Configuring HYTestPods template.</span><br><span class="line"></span><br><span class="line">------------------------------</span><br><span class="line"></span><br><span class="line">To get you started we need to ask a few questions, this should only take a minute.</span><br><span class="line"></span><br><span class="line">If this is your first time we recommend running through with the guide:</span><br><span class="line"> - https://guides.cocoapods.org/making/using-pod-lib-create.html</span><br><span class="line"> ( hold cmd and click links to open in a browser. )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">What platform do you want to use?? [ iOS / macOS ]</span><br><span class="line"> &gt; iOS</span><br><span class="line"></span><br><span class="line">What language do you want to use?? [ Swift / ObjC ]</span><br><span class="line"> &gt; ObjC</span><br><span class="line"></span><br><span class="line">Would you like to include a demo application with your library? [ Yes / No ]</span><br><span class="line"> &gt; Yes</span><br><span class="line"></span><br><span class="line">Which testing frameworks will you use? [ Specta / Kiwi / None ]</span><br><span class="line"> &gt;</span><br><span class="line">specta</span><br><span class="line">Would you like to do view based testing? [ Yes / No ]</span><br><span class="line"> &gt; No</span><br><span class="line"></span><br><span class="line">What is your class prefix?</span><br><span class="line"> &gt; HY</span><br><span class="line">hint: Using &#x27;master&#x27; as the name for the initial branch. This default branch name</span><br><span class="line">hint: is subject to change. To configure the initial branch name to use in all</span><br><span class="line">hint: of your new repositories, which will suppress this warning, call:</span><br><span class="line">hint:</span><br><span class="line">hint: 	git config --global init.defaultBranch &lt;name&gt;</span><br><span class="line">hint:</span><br><span class="line">hint: Names commonly chosen instead of &#x27;master&#x27; are &#x27;main&#x27;, &#x27;trunk&#x27; and</span><br><span class="line">hint: &#x27;development&#x27;. The just-created branch can be renamed via this command:</span><br><span class="line">hint:</span><br><span class="line">hint: 	git branch -m &lt;name&gt;</span><br><span class="line"></span><br><span class="line">Running pod install on your new library.</span><br><span class="line"></span><br><span class="line">Analyzing dependencies</span><br><span class="line">Downloading dependencies</span><br><span class="line">Installing Expecta (1.0.6)</span><br><span class="line">Installing HYTestPods (0.1.0)</span><br><span class="line">Installing Specta (1.0.7)</span><br><span class="line">Generating Pods project</span><br><span class="line">Integrating client project</span><br><span class="line"></span><br><span class="line">[!] Please close any current Xcode sessions and use `HYTestPods.xcworkspace` for this project from now on.</span><br><span class="line">Pod installation complete! There are 3 dependencies from the Podfile and 3 total pods installed.</span><br><span class="line"></span><br><span class="line"> Ace! you&#x27;re ready to go!</span><br><span class="line"> We will start you off by opening your project in Xcode</span><br><span class="line">  open &#x27;HYTestPods/Example/HYTestPods.xcworkspace&#x27;</span><br><span class="line"></span><br><span class="line">To learn more about the template see `https://github.com/CocoaPods/pod-template.git`.</span><br><span class="line">To learn more about creating a new pod, see `https://guides.cocoapods.org/making/making-a-cocoapod`.</span><br></pre></td></tr></table></figure>

<p>执行完成会自动创建指定名称的<code>Pod</code>库目录，并自动打开示例项目。<code>Pod</code>库目录结构如下：</p>
<img src="http://res.yycode.top:8001/backup/blogImages/iOS制作私有Pod库/QQ20210419-223908@2x.png" style="zoom:50%;" />

<ol>
<li><code>Example</code>：示例代码</li>
<li><code>HYTestPod</code>：<code>Classess</code>源代码，<code>Assets</code>资源文件</li>
<li><code>HYTestPod.podspec</code>：记录库的信息</li>
</ol>
<h3 id="1-2-完善Pod配置文件"><a href="#1-2-完善Pod配置文件" class="headerlink" title="1.2 完善Pod配置文件"></a>1.2 完善<code>Pod</code>配置文件</h3><p>在<code>GitHud</code>创建私有库，修改<code>Pod</code>库配置文件<code>[YourPodName].podspec</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Pod::Spec.new do |s|</span><br><span class="line"></span><br><span class="line">  # 库名称</span><br><span class="line">  s.name             = &#x27;HYFramework&#x27;</span><br><span class="line"></span><br><span class="line">  # 指定支持的平台和版本，不写则默认支持所有的平台，如果支持多个平台，则使用下面的deployment_target定义</span><br><span class="line">  #spec.platform      = :ios</span><br><span class="line"></span><br><span class="line">  # 版本号</span><br><span class="line">  s.version          = &#x27;1.0.0&#x27;</span><br><span class="line"></span><br><span class="line">  # 库简短介</span><br><span class="line">  s.summary          = &#x27;自定义OC开发工具集&#x27;</span><br><span class="line"></span><br><span class="line"># This description is used to generate tags and improve search results.</span><br><span class="line">#   * Think: What does it do? Why did you write it? What is the focus?</span><br><span class="line">#   * Try to keep it short, snappy and to the point.</span><br><span class="line">#   * Write the description between the DESC delimiters below.</span><br><span class="line">#   * Finally, don&#x27;t worry about the indent, CocoaPods strips it!</span><br><span class="line"></span><br><span class="line">  # 开源库描述</span><br><span class="line">  s.description      = &lt;&lt;-DESC</span><br><span class="line">一套自定义的OC开发工具集</span><br><span class="line">                       DESC</span><br><span class="line"></span><br><span class="line">  # 开源库地址，或者是博客、社交地址等</span><br><span class="line">  s.homepage         = &#x27;https://github.com/MrChenYoung&#x27;</span><br><span class="line"></span><br><span class="line">  # s.screenshots     = &#x27;www.example.com/screenshots_1&#x27;, &#x27;www.example.com/screenshots_2&#x27;</span><br><span class="line">  </span><br><span class="line">  # 开源协议</span><br><span class="line">  s.license          = &#123; :type =&gt; &#x27;MIT&#x27;, :file =&gt; &#x27;LICENSE&#x27; &#125;</span><br><span class="line"></span><br><span class="line">  # 开源库作者</span><br><span class="line">  s.author           = &#123; &#x27;mrchenyoung&#x27; =&gt; &#x27;chenhuiyiyoung@163.com&#x27; &#125;</span><br><span class="line"></span><br><span class="line">  # 开源库GitHub的路径与tag值，GitHub路径后必须有.git,tag实际就是上面的版本</span><br><span class="line">  s.source           = &#123; :git =&gt; &#x27;https://github.com/mrchenyoung/HYFramework.git&#x27;, :tag =&gt; s.version.to_s &#125;</span><br><span class="line"></span><br><span class="line">  # 社交网址</span><br><span class="line">  # s.social_media_url = &#x27;https://twitter.com/&lt;TWITTER_USERNAME&gt;&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  # 开源库最低支持</span><br><span class="line">  s.ios.deployment_target = &#x27;9.0&#x27;</span><br><span class="line"></span><br><span class="line">  # 源库资源文件</span><br><span class="line">  s.source_files = &#x27;HYFramework/Classes/**/*&#x27;</span><br><span class="line">  </span><br><span class="line">  # 是否支持arc</span><br><span class="line">  s.requires_arc = true</span><br><span class="line"></span><br><span class="line">  # s.resource_bundles = &#123;</span><br><span class="line">  #   &#x27;HYFramework&#x27; =&gt; [&#x27;HYFramework/Assets/*.png&#x27;]</span><br><span class="line">  # &#125;</span><br><span class="line"></span><br><span class="line">  # s.public_header_files = &#x27;Pod/Classes/**/*.h&#x27;</span><br><span class="line"></span><br><span class="line">  # 依赖系统库</span><br><span class="line">  # s.frameworks = &#x27;UIKit&#x27;, &#x27;MapKit&#x27;</span><br><span class="line">  </span><br><span class="line">  # 开源库依赖库</span><br><span class="line">  s.dependency &#x27;AFNetworking&#x27;, &#x27;3.2.1&#x27;</span><br><span class="line">  s.dependency &#x27;Masonry&#x27;</span><br><span class="line">  s.dependency &#x27;MBProgressHUD&#x27;</span><br><span class="line">  s.dependency &#x27;MJRefresh&#x27;</span><br><span class="line">  s.dependency &#x27;YYModel&#x27;</span><br><span class="line">  s.dependency &#x27;ZLPhotoBrowser&#x27;</span><br><span class="line">  </span><br><span class="line">end</span><br></pre></td></tr></table></figure>



<h3 id="1-3-源码编写"><a href="#1-3-源码编写" class="headerlink" title="1.3 源码编写"></a>1.3 源码编写</h3><p>所有的<code>pod</code>源码都存放在<code>HYTestPod</code>目录下的<code>Classes</code>目录下。示例代码中<code>Pod</code>下有一个<code>Development Pods</code>文件夹，该目录下的<code>HYTestPod</code>目录和<code>pod</code>库根文件夹下的同名目录是相关联的，保证了在示例项目中修改的源码和<code>pod</code>库根目录下同名文件夹下的源码保持一致。</p>
<img src="http://res.yycode.top:8001/backup/blogImages/iOS制作私有Pod库/QQ20210419-224440@2x.png" style="zoom:50%;" />





<h3 id="1-4-Pod配置文件验证"><a href="#1-4-Pod配置文件验证" class="headerlink" title="1.4 Pod配置文件验证"></a>1.4 <code>Pod</code>配置文件验证</h3><p>本地<code>pod</code>库配置文件验证，适用于还没有把源码提交到<code>github</code>前，本地配置的验证（如果关联有其他库，需要带<code>--use-libraries</code>参数）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod lib lint --allow-warnings</span><br></pre></td></tr></table></figure>



<p>远端<code>pod</code>库配置文件的验证，验证<code>github</code>上库的配置文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod spec lint --allow-warnings</span><br></pre></td></tr></table></figure>



<p>如果有如下提示，添加<code>--allow-warnings</code>参数忽略警告：</p>
<p><img src="http://res.yycode.top:8001/backup/blogImages/iOS%E5%88%B6%E4%BD%9C%E7%A7%81%E6%9C%89Pod%E5%BA%93/QQ20210419-225830@2x.png"></p>
<p>提示<code>HYTestPod passed validation.</code>表示验证通过。</p>
<hr>
<h2 id="2-提交代码到GitHub"><a href="#2-提交代码到GitHub" class="headerlink" title="2. 提交代码到GitHub"></a>2. 提交代码到<code>GitHub</code></h2><p>在<code>github</code>创建放<code>pod</code>库源码的代码库，注意<code>pod</code>库配置文件的<code>s.source</code>内的地址要和该库的地址保持一致。然后在<code>pod</code>库的根目录下执行如下命令，提交源码到<code>github</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#添加远端地址</span><br><span class="line">git remote add origin https://github.com/MrChenYoung/HYTestPod.git  </span><br><span class="line">#提交所有内容</span><br><span class="line">git add .  &amp;&amp; git commit -m &#x27;v1.0.0&#x27;</span><br><span class="line">#推送代码到Github</span><br><span class="line">git push origin master  </span><br><span class="line"># 添加 1.0.0 tag</span><br><span class="line">git tag 1.0.0  </span><br><span class="line">#提交tag</span><br><span class="line">git push origin 1.0.0 </span><br></pre></td></tr></table></figure>

<p>现在就可以是在项目<code>podfile</code>文件中添加库信息，执行<code>pod install</code>就可以使用了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;HYTestPod&#x27;, :git =&gt; &#x27;https://github.com/MrChenYoung/HYTestPods.git&#x27;</span><br></pre></td></tr></table></figure>

<p>但是还不能够通过<code>pod search</code>命令搜索到库，而且只有知道<code>pod</code>库的<code>git</code>地址才能够使用。</p>
<hr>
<h2 id="3-发布podspec配置文件到公有pod库"><a href="#3-发布podspec配置文件到公有pod库" class="headerlink" title="3. 发布podspec配置文件到公有pod库"></a>3. 发布<code>podspec</code>配置文件到公有<code>pod</code>库</h2><p>需要把<code>pod</code>库的配置文件(.podspec文件)提交到<code>cocoapods</code>的公有管理库，也就是<code>https://github.com/CocoaPods/Specs.git</code>上，才可以通过<code>pod search</code>命令查找到库，并且只要在项目的<code>podfile</code>文件中添加<code>pod  库名</code>就可以安装。</p>
<h3 id="3-1-注册session"><a href="#3-1-注册session" class="headerlink" title="3.1 注册session"></a>3.1 注册<code>session</code></h3><p>如果是第一次发布<code>podspec</code>文件，会提示<code>[!] You need to run </code>pod trunk register<code> to register a session first.</code>，表示要先注册<code>session</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod trunk register chenhuiyiyoung@163.com &#x27;code009&#x27; --description=&#x27;A description&#x27;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>chenhuiyiyoung@163.com</code>是真正的邮箱，用于注册验证</li>
<li><code>code009</code>为用户名</li>
<li><code>A description</code>描述文本</li>
</ul>
<p>执行完注册命令，会收到一封验证的邮件，复制邮件中的链接打开验证。通过一下命令查看自己的注册信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod trunk me</span><br></pre></td></tr></table></figure>

<p>给<code>pod</code>库添加拥有者：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod trunk add-owner [POD REP NAME] [NEW EMAIL]</span><br></pre></td></tr></table></figure>

<p>从<code>pod</code>库拥有者列表中移除用户：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod trunk remove-owner [POD REP NAME] [OLD EMAIL]</span><br></pre></td></tr></table></figure>





<h3 id="3-2-发布podspec"><a href="#3-2-发布podspec" class="headerlink" title="3.2 发布podspec"></a>3.2 发布<code>podspec</code></h3><p>发布<code>podspec</code>文件（如果关联有其他库，需要带<code>--use-libraries</code>参数）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod trunk push HYTestPods.podspec --allow-warnings</span><br></pre></td></tr></table></figure>

<p>有如下提示，表示发布成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Updating spec repo `trunk`</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"> 🎉  Congrats</span><br><span class="line"></span><br><span class="line"> 🚀  HYTestPods (1.0.0) successfully published</span><br><span class="line"> 📅  May 13th, 19:57</span><br><span class="line"> 🌎  https://cocoapods.org/pods/HYTestPods</span><br><span class="line"> 👍  Tell your friends!</span><br><span class="line">--------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>

<p>现在就可以在项目的<code>podfile</code>文件中添加<code>pod HYTestPods</code>，然后执行<code>pod install</code>添加库到项目中了。如果<code>pod install</code>提示找不到库，执行<code>pod install --repo-update</code>命令。</p>
<hr>
<h2 id="4-pod库版本更新"><a href="#4-pod库版本更新" class="headerlink" title="4. pod库版本更新"></a>4. <code>pod</code>库版本更新</h2><ul>
<li><p>更新新版本源码</p>
</li>
<li><p>更改<code>.podspec</code>文件中<code>s.version</code>字段为最新版本号，如<code>2.0.0</code></p>
</li>
<li><p>提交代码到<code>github</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &#x27;new version&#x27;</span><br><span class="line">git tag 2.0.0</span><br><span class="line">git push orign master</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure>
</li>
<li><p>发布新版<code>.podspec</code>文件到<code>pod</code>公有库中（如果关联有其他库，需要带<code>--use-libraries</code>参数）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod trunk push HYTestPods.podspec --allow-warnings</span><br></pre></td></tr></table></figure>

<p>如果<code>pod search</code>搜索不到新版本，先执行<code>pod repo update</code>命令，然后在搜索。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
        <category>CocoaPods</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>内存面试题</title>
    <url>/2021/06/28/%E5%86%85%E5%AD%98%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<p>123456</p>
]]></content>
      <categories>
        <category>iOS</category>
        <category>OC</category>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>个人简历2021</title>
    <url>/2021/06/08/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%862021/</url>
    <content><![CDATA[<h1 style="text-align:center">简  历</h1>


<h2 id="陈会毅"><a href="#陈会毅" class="headerlink" title="陈会毅"></a>陈会毅</h2><p><i class="fa fa-phone-square" style="font-size: 18px;"></i> 13761943167&nbsp;&nbsp;&nbsp;&nbsp;<i class="fa fa-envelope"></i> <a href="mailto:&#x63;&#104;&#101;&#x6e;&#x68;&#117;&#105;&#x79;&#105;&#121;&#x6f;&#117;&#x6e;&#x67;&#64;&#x67;&#x6d;&#x61;&#x69;&#108;&#x2e;&#x63;&#x6f;&#109;">&#x63;&#104;&#101;&#x6e;&#x68;&#117;&#105;&#x79;&#105;&#121;&#x6f;&#117;&#x6e;&#x67;&#64;&#x67;&#x6d;&#x61;&#x69;&#108;&#x2e;&#x63;&#x6f;&#109;</a></p>
<hr>
<h5 id="个人信息"><a href="#个人信息" class="headerlink" title=" 个人信息"></a><i class="fa fa-user"></i> 个人信息</h5><ul>
<li>本科&#x2F;软件工程</li>
<li>工作年限: 5年</li>
<li>期望职位: iOS开发工程师</li>
<li>期望薪资: 9K-13K</li>
<li>工作状态: 在职，一周内到岗</li>
<li>博客: <a href="http://blog.yycode.top:8002/">http://blog.yycode.top:8002/</a></li>
<li>GitHub: <a href="https://github.com/MrChenYoung">https://github.com/MrChenYoung</a></li>
</ul>
<hr>
<h5 id="专业技能"><a href="#专业技能" class="headerlink" title=" 专业技能"></a><i class="fa fa-bookmark"></i> 专业技能</h5><ul>
<li>熟练使用<code>Objective-C</code>、<code>Swift</code> 编程语言；</li>
<li>熟悉<code>UIKit</code>框架，擅长各种复杂的界面布局，熟练使用<code>Storyboard</code>、<code>Xib</code> 编程；</li>
<li>熟悉<code>iOS</code>引用计数机制，熟悉<code>RunLoop</code>，<code>Runtime</code>；</li>
<li>熟悉<code>MVC</code>、<code>MVVM</code>、<code>MVP</code>架构模式，了解组件化开发；</li>
<li>熟悉<code>单例</code>、<code>代理</code>、<code>通知</code>、<code>Block</code>、<code>KVC</code>、<code>KVO</code>等设计模式；</li>
<li>熟悉<code>Pthread</code>、<code>NSTread</code>、<code>NSOperation</code>、<code>GCD</code>多线程开发技术；</li>
<li>熟练使用<code>NSUserDefaults</code>、<code>FMDB</code>、<code>CoreData</code>存储数据；</li>
<li>熟悉<code>AFNetworking</code>、<code>SDWebImage</code>、<code>Masonry</code>等开源框架；</li>
<li>熟练使用<code>CocoaPods</code>管理第三方框架，发布过开源框架<code>HYFramework-OC</code>，目前<code>2.0.0</code>版本维护更新中；</li>
<li>熟练使用<code>Vim</code>编辑器和<code>Git</code>版本管理工具；熟悉<code>TCP/UDP</code>协议，了解<code>Socket</code>协议；</li>
<li>熟练使用<code>Instruments</code>、<code>Debug navigator</code>进行性能优化；</li>
</ul>
<hr>
<h5 id="其他技能"><a href="#其他技能" class="headerlink" title=" 其他技能"></a><i class="fa fa-bookmark"></i> 其他技能</h5><ul>
<li>熟悉<code>PHP</code>和<code>MySQL</code>基本语法，熟练使用<code>Mysqli</code>和<code>PDO</code>对数据增删改查操作。</li>
<li>了解<code>前端开发</code>；会用<code>HTML</code>, <code>CSS</code>, <code>JavaScript/jQuery</code>搭建基本的网页；会用<code>AJAX</code>进行网络请求。</li>
<li>了解<code>React Native开发</code>；有原生<code>iOS</code>项目集成<code>RN</code>的经验。</li>
<li>了解<code>Android开发</code>；了解<code>Java</code>基础语法，能使用安卓五大布局和<code>UI</code>控件搭建界面。</li>
</ul>
<hr>
<h5 id="工作经历"><a href="#工作经历" class="headerlink" title=" 工作经历"></a><i class="fa fa-briefcase"></i> 工作经历</h5><div class="left-2em">
  <div>
        <span style="font-weight: bold; font-size: 16px;">
            <i class="fa fa-building"></i>
            河南臻尚网络科技有限公司
        </span>
        <span class="time">
            2020.11 - 至今
        </span>
    </div>
    <div class="left-2em">
        <div class="margin-top-5"><i class="fas fa-user-tie"></i> iOS开发工程师</div>
        <ul>
            <li>负责iOS项目的设计和开发；</li>
            <li>负责项目的打包发布。</li>
        </ul>
    </div>
    <div>
        <span style="font-weight: bold; font-size: 16px;">
            <i class="fa fa-building"></i>
            上海班凯信息技术服务有限公司（外派到德邦）
        </span>
        <span class="time">
            2017.11 - 2020.10
        </span>
    </div>
    <div class="left-2em">
        <div class="margin-top-5"><i class="fas fa-user-tie"></i> iOS开发工程师</div>
        <ul>
            <li>负责项目中原生模块的开发和维护；</li>
            <li>负责项目中H5模块的嵌入和交互；</li>
            <li>项目后期的维护和版本迭代。</li>
        </ul>
    </div>
    <div>
        <span style="font-weight: bold; font-size: 16px;">
            <i class="fa fa-building"></i>
            上海斯菲尔物流股份有限公司
        </span>
        <span class="time">
            2015.10 - 2017.11
        </span>
    </div>
    <div class="left-2em">
        <div class="margin-top-5"><i class="fas fa-user-tie"></i> iOS开发工程师</div>
        <ul>
            <li>主导公司项目的研发；</li>
            <li>主导公司外包项目的开发；</li>
            <li>主导公司项目后期的维护和升级。</li>
        </ul>
    </div>
</div>




<hr>
<h5 id="项目经验"><a href="#项目经验" class="headerlink" title=" 项目经验"></a><i class="fa fa-folder"></i> 项目经验</h5><div class="left-2em">
  <i class="fa fa-product-hunt"></i> 国晋云
    &nbsp;&nbsp;
    <span class="tag">
        <i class="fa fa-tag"></i> Objective-C&nbsp;
    </span>
    <div class="left-2em">
        <div class="margin-top-5"><i class="fa fa-book"></i> 项目简介:</div>
        <p class="left-2em indent-2em">一款提高高校导师工作效率，方便学生学习的`APP`。共有导师和学生两种用户身份；主模块分为`毕业论文`、`实习管理`和`学徒制`三个子模块，方便不同时期和不同身份学生的学习，每个子模块下包含多个不同的学习内容。</p>
        <i class="fa fa-list-alt"></i> 技术要点:
        <ul>
            <li>`xib+AutoLayout`和`纯代码+Masonry`混合界面布局;</li>
            <li>集成`ZXingObjC`、`Bugly`和`友盟`等第三方框架;</li>
        </ul>
    <i class="fa fa-product-hunt"></i> 智慧收派
    &nbsp;&nbsp;
    <span class="tag">
        <i class="fa fa-tag"></i> Objective-C&nbsp;
        <i class="fa fa-tag"></i> HTML5
    </span>
    <div class="left-2em">
        <div class="margin-top-5"><i class="fa fa-book"></i> 项目简介:</div>
        <p class="left-2em indent-2em">智慧收派分经理和快递员两种身份，不同身份登录界面显示不同。除经理界面实时位置模块外，其他均为原生嵌入的H5页面。经理通过实时位置模块查看当天快递员上班人数、登录PDA人数、GPS开启的人数、快递员位置分布，查看快递员当天路线，地图上回放快递员行走路线。了解快递员在区域内外的滞留情况和聚众情况等。</p>
        <i class="fa fa-list-alt"></i> 技术要点:
        <ul>
            <li>集成高德地图SDK;</li>
            <li>自定义地图点标记，显示快递员位置，是否登录PDA，高效低效情况;</li>
            <li>通过两个UITableView联动实现部门或快递员筛选;</li>
            <li>利用高德地图绘制折线API，实现快递员当天送货轨迹，轨迹线不同颜色反应快递员不同的行驶速度;</li>
            <li>封装高德地图点平滑移动API，实现快递员轨迹回放、暂停功能;</li>
            <li>配合H5通过高德地图获取POI数据API，实现快递员信息采集;</li>
            <li>集成百度全景SDK，配合H5实现经理端快递员采集信息时周边全景查看。</li>
        </ul>
    </div>
    <i class="fa fa-product-hunt"></i> 斯菲尔物流
    &nbsp;&nbsp;
    <span class="tag">
        <i class="fa fa-tag"></i> Objective-C&nbsp;
        <i class="fa fa-tag"></i> React Native
    </span>
    <div class="left-2em">
        <div class="margin-top-5"><i class="fa fa-book"></i> 项目简介:</div>
        <p class="left-2em indent-2em">
        通过高德定位获取司机实时位置并上传给后台来跟踪货物的运输情况和运输路线。司机可以通过APP抢单、及时更新运单状态、查看运单结算状态、提现账户余额到银行卡等。
        </p>
        <i class="fa fa-list-alt"></i> 技术要点:
        <ul>
            <li>集成高德定位SDK获取司机实时位置，开启APP后台更新位置，保证APP在后台也能获取并上传位置信息;</li>
            <li>集成科大讯飞语音合成SDK，播放指定推送消息内容;</li>
            <li>自定义UITableViewCell实现常跑城市和常跑线路的添加和删除;</li>
            <li>嵌入我的车辆、结算中心、派车列表三个React Native页面;</li>
            <li>集成支付宝支付和微信支付，充值或退款诚信保证金;</li>
            <li>集成百度人脸识别SDK，采集和对比人脸，实现提现人脸验证;</li>
            <li>集成微信分享SDK，分享APP或运单到朋友圈和微信好友;</li>
            <li>集成友盟统计，统计和分析APP的使用情况。</li>
        </ul>
    </div>
    <i class="fa fa-product-hunt"></i> 叭叭货车司机版
    &nbsp;&nbsp;
    <span class="tag">
        <i class="fa fa-tag"></i> Swift&nbsp;
        <i class="fa fa-tag"></i> 独立开发
    </span>
    <div class="left-2em">
        <div class="margin-top-5"><i class="fa fa-book"></i> 项目简介:</div>
        <p class="left-2em indent-2em">
        叭叭货车是上海斯菲尔物流股份有限公司为深圳子公司（深圳斯菲尔供应链管理有限公司）打造的一款APP。旨在为司机和货主提供优质高效的运力资源及其配套服务，降低物流过程的成本，提升货物流通的效率。
        </p>
        <i class="fa fa-list-alt"></i> 技术要点:
        <ul>
            <li>配合产品部设计的原型和设计师提供的素材搭建主框架;</li>
            <li>用户交互界面代码编写实现，配合后台人员调试和对接接口，实现界面数据展示;</li>
            <li>集成支付宝、微信支付SDK，实现司机钱包充值功能;</li>
            <li>集成高德定位SDK，上传司机运输过程中的实时位置信息;</li>
            <li>集成高德导航SDK，根据货物途径点，实现带有途径点的高德导航功能。</li>
        </ul>
    </div>
    <i class="fa fa-product-hunt"></i> 叭叭货车货主版
    &nbsp;&nbsp;
    <span class="tag">
        <i class="fa fa-tag"></i> Swift&nbsp;
        <i class="fa fa-tag"></i> 独立开发
    </span>
    <div class="left-2em">
        <div class="margin-top-5"><i class="fa fa-book"></i> 项目简介:</div>
        <p class="left-2em indent-2em">
            叭叭货车是上海斯菲尔物流股份有限公司为深圳子公司（深圳斯菲尔供应链管理有限公司）打造的一款APP。旨在为司机和货主提供优质高效的运力资源及其配套服务，降低物流过程的成本，提升货物流通的效率。
        </p>
        <i class="fa fa-list-alt"></i> 技术要点:
        <ul>
            <li>项目主体框架搭建及用户界面代码编写;</li>
            <li>配合后台人员调试和对接接口，实现界面数据显示</li>
            <li>集成高德地图SDK，根据司机上传的位置信息显示司机行走轨迹;</li>
            <li>集成支付宝、微信支付SDK，实现货主线上付款功能</li>
        </ul>
    </div>
</div>




<hr>
<h5 id="自我评价"><a href="#自我评价" class="headerlink" title=" 自我评价"></a><i class="fa fa-comment"></i> 自我评价</h5><ul>
<li>五年<code>iOS</code>开发经验，独立开发上架过多款<code>APP</code>；</li>
<li>自学过<code>React Native</code>跨平台开发技术，并在原生项目中集成；</li>
<li>工作认真，责任心强，有较强抗压能力；</li>
<li>热衷于编程，业余时间经常浏览<code>GitHub</code>、<code>Stack Overflow</code>、<code>掘金</code>等开发者网站，不断拓展提升自我。</li>
</ul>
<hr>
<h5 id="致谢"><a href="#致谢" class="headerlink" title=" 致谢"></a><i class="fa fa-gratipay"></i> 致谢</h5><div class="left-2em">
    感谢您花时间阅读我的简历，期待能有机会和您共事。
</div>







<head>
    <!-- 自定义的样式 -->
    <style type="text/css">
        body {
            font-family: "微软雅黑", Helvetica, "微软雅黑", Arial, sans-serif;
            font-size: 16px;
            line-height: 28px;
            color: #737373;
            margin: 10px 13px;
        }
        /* 设置左边距2个字符 */
        .left-2em {
            padding-left: 2em;
        }
        /* 设置时间靠右显示 */
        .time {
            display: block;
            float: right;
            /* margin-right: 150px; */
        }
        /* 去掉无序列表上边距 */
        ul {
            margin-top: 10px;
        }
        /* 首行缩进两个字符 */
        .indent-2em {
            text-indent: 2em;
        }
        /* tag */
        .tag {
            font-size: 10px;
        }
        .margin-top-5 {
            margin-top: 5px;
        }
    </style>
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.13/css/all.css">
</head>




















]]></content>
      <categories>
        <category>其他</category>
        <category>简历</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>手动申请SSL证书</title>
    <url>/2021/06/22/%E6%89%8B%E5%8A%A8%E7%94%B3%E8%AF%B7SSL%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<h2 id="1-下载KeyManager"><a href="#1-下载KeyManager" class="headerlink" title="1. 下载KeyManager"></a>1. 下载<code>KeyManager</code></h2><ul>
<li>前往<a href="https://keymanager.org/">KeyManager</a>下载指定版本的安装包</li>
<li>安装，设置主密码</li>
<li>后续申请证书要用到该软件</li>
</ul>
<hr>
<h2 id="2-申请免费SSL证书"><a href="#2-申请免费SSL证书" class="headerlink" title="2. 申请免费SSL证书"></a>2. 申请免费<code>SSL</code>证书</h2><ul>
<li><p>前往<a href="https://freessl.cn/">FreeSSL</a>，输入域名，并选择指定的证书提供商，点击创建免费的SSL证书</p>
<p><img src="http://res.yycode.top:8001/backup/blogImages/%E6%89%8B%E5%8A%A8%E7%94%B3%E8%AF%B7SSL%E8%AF%81%E4%B9%A6/QQ20210622-120921@2x.png"></p>
</li>
<li><p>输入邮箱（证书将要到期会邮件通知），选择文件校验，点击创建</p>
<p><img src="http://res.yycode.top:8001/backup/blogImages/%E6%89%8B%E5%8A%A8%E7%94%B3%E8%AF%B7SSL%E8%AF%81%E4%B9%A6/QQ20210622-122041@2x.png"></p>
</li>
<li><p>提示打开<code>KeyManager</code>，点击打开。打开<code>KeyManager</code>会提示<code>CSR生成成功，请返回浏览器继续操作</code></p>
</li>
<li><p>返回浏览器点击弹窗的<code>继续</code>，开始文件校验</p>
<p><img src="http://res.yycode.top:8001/backup/blogImages/%E6%89%8B%E5%8A%A8%E7%94%B3%E8%AF%B7SSL%E8%AF%81%E4%B9%A6/QQ20210622-122440@2x.png"></p>
</li>
<li><p>下载文件到指定的路径，保证完整的文件路径可以在浏览器中被访问</p>
<p><img src="http://res.yycode.top:8001/backup/blogImages/%E6%89%8B%E5%8A%A8%E7%94%B3%E8%AF%B7SSL%E8%AF%81%E4%B9%A6/QQ20210622-122736@2x.png"></p>
</li>
<li><p>然后点击配置完成，检测一下。等待检测结果，只需要有一个匹配即可</p>
<p><img src="http://res.yycode.top:8001/backup/blogImages/%E6%89%8B%E5%8A%A8%E7%94%B3%E8%AF%B7SSL%E8%AF%81%E4%B9%A6/QQ20210622-123208@2x.png"></p>
</li>
<li><p>回到上一步，点击验证，验证完成，回到<code>KeyManager</code>下载证书</p>
</li>
</ul>
]]></content>
      <categories>
        <category>经验分享</category>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
        <tag>SSL证书</tag>
      </tags>
  </entry>
  <entry>
    <title>备忘录</title>
    <url>/2021/07/01/%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    <content><![CDATA[<h2 id="1-网站自动化部署"><a href="#1-网站自动化部署" class="headerlink" title="1. 网站自动化部署"></a>1. 网站自动化部署</h2><h3 id="1-拷贝部署程序"><a href="#1-拷贝部署程序" class="headerlink" title="1.拷贝部署程序"></a>1.拷贝部署程序</h3><p>git clone <a href="https://github.com/MrChenYoung/AutoDeployShell.git">https://github.com/MrChenYoung/AutoDeployShell.git</a> &amp;&amp; chmod -R 700 AutoDeployShell &amp;&amp; cd AutoDeployShell</p>
<p>mrchenyoung</p>
<p>chenhuiyi199156</p>
<h3 id="2-查看指定服务信息-指定端口服务信息"><a href="#2-查看指定服务信息-指定端口服务信息" class="headerlink" title="2. 查看指定服务信息&#x2F;指定端口服务信息"></a>2. 查看指定服务信息&#x2F;指定端口服务信息</h3><p>ps aux | grep privoxy</p>
<p>ss -tan | grep 9002</p>
<hr>
<h2 id="2-docker相关"><a href="#2-docker相关" class="headerlink" title="2. docker相关"></a>2. docker相关</h2><h3 id="1-docker运行"><a href="#1-docker运行" class="headerlink" title="1. docker运行"></a>1. docker运行</h3><p>docker run -d \</p>
<p>-v &#x2F;opt&#x2F;jellyfin&#x2F;config:&#x2F;config \</p>
<p>-v &#x2F;opt&#x2F;jellyfin&#x2F;cache:&#x2F;cache \</p>
<p>-v &#x2F;media:&#x2F;media \</p>
<p>–net&#x3D;host \</p>
<p>–name&#x3D;jellyfin \</p>
<p>–restart&#x3D;always \</p>
<p>–add-host&#x3D;api.themoviedb.org:13.224.161.90 \</p>
<p>–add-host&#x3D;image.tmdb.org:104.16.61.155 \</p>
<p>–add-host&#x3D;api.themoviedb.org:13.35.67.86 \</p>
<p>–add-host&#x3D;<a href="http://www.themoviedb.org:54.192.151.79">www.themoviedb.org:54.192.151.79</a> \</p>
<p>–device&#x3D;&#x2F;dev&#x2F;dri:&#x2F;dev&#x2F;dri \</p>
<p>jellyfin&#x2F;jellyfin:latest</p>
<h3 id="2-查看docker容器信息-进入docker容器内部"><a href="#2-查看docker容器信息-进入docker容器内部" class="headerlink" title="2. 查看docker容器信息,进入docker容器内部"></a>2. 查看docker容器信息,进入docker容器内部</h3><p>docker ps -a</p>
<p>docker exec -it 8a1cf6a58eb7 &#x2F;bin&#x2F;bash</p>
<p>docker exec -it e783d8d58841 &#x2F;bin&#x2F;bash</p>
<h3 id="3-拷贝docker容器内容到本地"><a href="#3-拷贝docker容器内容到本地" class="headerlink" title="3.拷贝docker容器内容到本地"></a>3.拷贝docker容器内容到本地</h3><p>docker cp -a 8a1cf6a58eb7:&#x2F;etc&#x2F;privoxy&#x2F;  &#x2F;volume4&#x2F;NAS-60&#x2F;</p>
<p>docker cp –help</p>
<h3 id="4-docker容器内安装服务"><a href="#4-docker容器内安装服务" class="headerlink" title="4. docker容器内安装服务"></a>4. docker容器内安装服务</h3><p>apt-get update</p>
<p>apt-get install vim</p>
<hr>
<h2 id="3-Linux命令"><a href="#3-Linux命令" class="headerlink" title="3. Linux命令"></a>3. Linux命令</h2><h3 id="1-后台执行脚本"><a href="#1-后台执行脚本" class="headerlink" title="1. 后台执行脚本"></a>1. 后台执行脚本</h3><p>nohup .&#x2F;gdbk.sh &amp;</p>
<p>nohup &#x2F;usr&#x2F;src&#x2F;kcptunClient&#x2F;client_kcptun -c &#x2F;usr&#x2F;src&#x2F;kcptunClient&#x2F;config.json &amp;</p>
<h3 id="2-安装progress服务"><a href="#2-安装progress服务" class="headerlink" title="2. 安装progress服务"></a>2. 安装progress服务</h3><p>Yum install progress</p>
<p>progress</p>
<p>watch progress -q</p>
<p>progress -w</p>
<h3 id="3-远程拷贝"><a href="#3-远程拷贝" class="headerlink" title="3. 远程拷贝"></a>3. 远程拷贝</h3><p>scp -r -P 9156 <a href="mailto:&#x72;&#x6f;&#x6f;&#116;&#64;&#100;&#100;&#x6e;&#115;&#x2e;&#x79;&#121;&#99;&#x6f;&#100;&#x65;&#46;&#x74;&#x6f;&#112;">&#x72;&#x6f;&#x6f;&#116;&#64;&#100;&#100;&#x6e;&#115;&#x2e;&#x79;&#121;&#99;&#x6f;&#100;&#x65;&#46;&#x74;&#x6f;&#112;</a>:&#x2F;www&#x2F;wwwroot&#x2F;res.yycode.ml&#x2F;NextCloud&#x2F;disk4T&#x2F;电影&#x2F;拆弹专家2 (2020) &#x2F;www&#x2F;wwwroot&#x2F;</p>
<h3 id="4-yum删除指定服务"><a href="#4-yum删除指定服务" class="headerlink" title="4. yum删除指定服务"></a>4. yum删除指定服务</h3><p>yum list installed</p>
<p>yum remove jellyfin.x86_64</p>
<h3 id="5-免密登录设置，拷贝本地rsa公钥到远端"><a href="#5-免密登录设置，拷贝本地rsa公钥到远端" class="headerlink" title="5. 免密登录设置，拷贝本地rsa公钥到远端"></a>5. 免密登录设置，拷贝本地rsa公钥到远端</h3><p>ssh-copy-id -i ~&#x2F;.ssh&#x2F;id_rsa.pub <a href="mailto:&#97;&#100;&#x6d;&#105;&#110;&#x40;&#119;&#119;&#x77;&#x2e;&#x79;&#x79;&#99;&#111;&#100;&#x65;&#46;&#x74;&#111;&#112;">&#97;&#100;&#x6d;&#105;&#110;&#x40;&#119;&#119;&#x77;&#x2e;&#x79;&#x79;&#99;&#111;&#100;&#x65;&#46;&#x74;&#111;&#112;</a> -p 9156</p>
<hr>
<h2 id="4-rclone相关"><a href="#4-rclone相关" class="headerlink" title="4. rclone相关"></a>4. rclone相关</h2><h3 id="1-rclone挂载谷歌云盘"><a href="#1-rclone挂载谷歌云盘" class="headerlink" title="1. rclone挂载谷歌云盘"></a>1. rclone挂载谷歌云盘</h3><p>#设置rclone代理</p>
<p>export HTTP_PROXY&#x3D;<a href="http://127.0.0.1:9002/">http://127.0.0.1:9002</a>;</p>
<p>export HTTPS_PROXY&#x3D;<a href="http://127.0.0.1:9002/">http://127.0.0.1:9002</a>;</p>
<p>rclone –config&#x3D;&#x2F;root&#x2F;.config&#x2F;rclone&#x2F;rclone.conf mount LY5: &#x2F;volume4&#x2F;NAS-60&#x2F;GoogleDrive&#x2F;LY5 –copy-links –no-gzip-encoding –no-check-certificate –allow-other –allow-non-empty –umask 000</p>
<p>command&#x3D;”mount QYD: &#x2F;www&#x2F;wwwroot&#x2F;res.yycode.ml&#x2F;QYD –copy-links –no-gzip-encoding –no-check-certificate –allow-other –allow-non-empty –umask 000”</p>
<p>cat &gt; &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;rcloneQYD.service &lt;&lt;EOF</p>
<p>[Unit]</p>
<p>Description&#x3D;Rclone</p>
<p>After&#x3D;network-online.target</p>
<p>[Service]</p>
<p>Type&#x3D;simple</p>
<p>ExecStart&#x3D;$(command -v rclone) ${command}</p>
<p>Restart&#x3D;on-abort</p>
<p>User&#x3D;root</p>
<p>[Install]</p>
<p>WantedBy&#x3D;default.target</p>
<p>EOF</p>
<h3 id="2-卸载rclone挂载的谷歌云盘"><a href="#2-卸载rclone挂载的谷歌云盘" class="headerlink" title="2. 卸载rclone挂载的谷歌云盘"></a>2. 卸载rclone挂载的谷歌云盘</h3><p>fusermount -qzu &#x2F;volume4&#x2F;NAS-60&#x2F;GoogleDrive&#x2F;QYD</p>
<hr>
<h2 id="5-代理设置"><a href="#5-代理设置" class="headerlink" title="5. 代理设置"></a>5. 代理设置</h2><h3 id="1-验证代理配置，查看代理服务器"><a href="#1-验证代理配置，查看代理服务器" class="headerlink" title="1.验证代理配置，查看代理服务器"></a>1.验证代理配置，查看代理服务器</h3><p>curl <a href="http://www.google.com/">www.google.com</a></p>
<p>curl “<a href="http://pv.sohu.com/cityjson?ie=utf-8">http://pv.sohu.com/cityjson?ie=utf-8</a>“</p>
<p>curl –socks5 192.168.0.80:9001 <a href="http://httpbin.org/ip">http://httpbin.org/ip</a></p>
<h3 id="2-socks5协议转http协议字段设置"><a href="#2-socks5协议转http协议字段设置" class="headerlink" title="2. socks5协议转http协议字段设置"></a>2. socks5协议转http协议字段设置</h3><p>listen-address</p>
<p>forward-socks5t</p>
<p>forward-socks5 .google.com 0.0.0.0:1086 .</p>
<hr>
<h2 id="6-宽带"><a href="#6-宽带" class="headerlink" title="6. 宽带"></a>6. 宽带</h2><p>037106599995</p>
<p>123456</p>
<hr>
<h2 id="7-其他"><a href="#7-其他" class="headerlink" title="7. 其他"></a>7. 其他</h2><p>16638854442</p>
<hr>
<h2 id="8-端口列表"><a href="#8-端口列表" class="headerlink" title="8. 端口列表"></a>8. 端口列表</h2><table>
<thead>
<tr>
<th>端口</th>
<th>服务</th>
</tr>
</thead>
<tbody><tr>
<td>8000</td>
<td>webstack</td>
</tr>
<tr>
<td>8001</td>
<td>res</td>
</tr>
<tr>
<td>8002</td>
<td>blog</td>
</tr>
<tr>
<td>8003</td>
<td>blogimage</td>
</tr>
<tr>
<td>8004</td>
<td>account</td>
</tr>
<tr>
<td>8005</td>
<td>love</td>
</tr>
<tr>
<td>8006</td>
<td>nextcloud</td>
</tr>
<tr>
<td>8007</td>
<td>webdav</td>
</tr>
<tr>
<td>8008</td>
<td>aria2</td>
</tr>
<tr>
<td>8009</td>
<td>test</td>
</tr>
<tr>
<td>8010</td>
<td>msm</td>
</tr>
<tr>
<td>8011</td>
<td>cloudmanager</td>
</tr>
<tr>
<td>8012</td>
<td>ftp</td>
</tr>
<tr>
<td>8013</td>
<td>jellyfin</td>
</tr>
<tr>
<td>8096</td>
<td>Emby</td>
</tr>
<tr>
<td>8920</td>
<td>Emby</td>
</tr>
<tr>
<td>9001</td>
<td>Trojan-privoxy</td>
</tr>
<tr>
<td>9002</td>
<td>Trojan-privoxy</td>
</tr>
<tr>
<td>9003</td>
<td>NAS</td>
</tr>
<tr>
<td>9004</td>
<td>NAS</td>
</tr>
<tr>
<td>9006</td>
<td>Trojan-privoxy</td>
</tr>
<tr>
<td>9007</td>
<td>Trojan-privoxy</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>FileUrl</th>
<th>否</th>
<th>string</th>
<th>附件路径，通过“<strong>公共方法&gt;&gt;上传附件</strong>”获取文件路径，参数：“ProjectDocuments</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>pod命令相关参数：</p>
<p>–allow-warnings   允许警告</p>
<p>–verbose   显示详细信息</p>
<h4 id="创建LICENSE-许可证-授权文件"><a href="#创建LICENSE-许可证-授权文件" class="headerlink" title="创建LICENSE(许可证&#x2F;授权文件)"></a>创建LICENSE(许可证&#x2F;授权文件)</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">touch LICENSE</span><br><span class="line"><span class="keyword">open</span> LICENSE</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Copyright (c) 2019-2029 TSBasicsKit Software Foundation (https://github.com/xxx/TSBasicsKit/)</span><br><span class="line"></span><br><span class="line">Permission is hereby granted, free of charge, to any person obtaining a copy</span><br><span class="line">of this software and associated documentation files (the &quot;Software&quot;), to deal</span><br><span class="line">in the Software without restriction, including without limitation the rights</span><br><span class="line">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span><br><span class="line">copies of the Software, and to permit persons to whom the Software is</span><br><span class="line">furnished to do so, subject to the following conditions:</span><br><span class="line"></span><br><span class="line">The above copyright notice and this permission notice shall be included in</span><br><span class="line">all copies or substantial portions of the Software.</span><br><span class="line"></span><br><span class="line">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span><br><span class="line">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span><br><span class="line">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span><br><span class="line">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span><br><span class="line">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span><br><span class="line">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span><br><span class="line">THE SOFTWARE.</span><br></pre></td></tr></table></figure>



<p>cocoapods1.8.4的时候默认pod源是通过CDN的，所以可以把trunk移除，即</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">pod repo <span class="keyword">remove</span> trunk</span><br></pre></td></tr></table></figure>















































<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX</span><br><span class="line">slmgr /skms kms.03k.org</span><br><span class="line">slmgr /ato</span><br></pre></td></tr></table></figure>



<p>Vultr </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fengzyuer@gmail.com</span><br><span class="line">Chy199156*</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gclone copy QYD:&#123;0APlzVXJfiuDEUk9PVA&#125;  ZC:&#123;1OvRSBi3o0ZMONkR_KXzWVpFMiTKXnn4n&#125;  --drive-server-side-across-configs -v</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>其他</category>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>测试文章</title>
    <url>/2023/11/23/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>测试</title>
    <url>/2023/11/20/%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>功能</th>
<th>报价</th>
</tr>
</thead>
<tbody><tr>
<td>实现在设置中搜索不到<code>信息</code>应用</td>
<td>800</td>
</tr>
<tr>
<td><code>iMessage</code>信息存储到手机硬盘</td>
<td>700</td>
</tr>
<tr>
<td>长按列表头像弹出菜单</td>
<td>500</td>
</tr>
<tr>
<td>总计</td>
<td>2000</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>第二篇博客</title>
    <url>/2023/11/16/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="1-标题一"><a href="#1-标题一" class="headerlink" title="1. 标题一"></a>1. 标题一</h1><h1 id="2-标题二"><a href="#2-标题二" class="headerlink" title="2. 标题二"></a>2. 标题二</h1><h1 id="3-标题三"><a href="#3-标题三" class="headerlink" title="3. 标题三"></a>3. 标题三</h1>]]></content>
  </entry>
  <entry>
    <title>第一篇博客</title>
    <url>/2023/11/16/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="1-标题一"><a href="#1-标题一" class="headerlink" title="1. 标题一"></a>1. 标题一</h2><h2 id="2-标题二"><a href="#2-标题二" class="headerlink" title="2. 标题二"></a>2. 标题二</h2><h2 id="3-标题三"><a href="#3-标题三" class="headerlink" title="3. 标题三"></a>3. 标题三</h2>]]></content>
  </entry>
</search>
